
DAC_Noise_and_Triangular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bfc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004d88  08004d88  00014d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa8  08004fa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb0  08004fb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08004fc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08004fc4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b076  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001949  00000000  00000000  0002b0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d0a  00000000  00000000  0002dc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dfa  00000000  00000000  00053922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea559  00000000  00000000  0005d71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002960  00000000  00000000  00147cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d6c 	.word	0x08004d6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d6c 	.word	0x08004d6c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	b0b6      	sub	sp, #216	; 0xd8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fb23 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f8c7 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 f99d 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e12:	f000 f96b 	bl	80010ec <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000e16:	f000 f937 	bl	8001088 <MX_DAC1_Init>
  HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_2, DAC_LFSRUNMASK_BITS11_0);
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);*/

  uint16_t buffer[NBR_OF_SAMPLES];
  uint16_t sin_amp = 0x08FF;
 8000e1a:	f640 03ff 	movw	r3, #2303	; 0x8ff
 8000e1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

  uint32_t i = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  for(i = 0; i < NBR_OF_SAMPLES; i++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000e2e:	e06f      	b.n	8000f10 <main+0x110>
  {
	  buffer[i] = ((sin_amp + 1)/2) * sin((2 * M_PI * i)/NBR_OF_SAMPLES + 1) + (sin_amp + 1)/2;
 8000e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000e34:	3301      	adds	r3, #1
 8000e36:	0fda      	lsrs	r2, r3, #31
 8000e38:	4413      	add	r3, r2
 8000e3a:	105b      	asrs	r3, r3, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb15 	bl	800046c <__aeabi_i2d>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000e4a:	f7ff faff 	bl	800044c <__aeabi_ui2d>
 8000e4e:	a351      	add	r3, pc, #324	; (adr r3, 8000f94 <main+0x194>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fb74 	bl	8000540 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <main+0x188>)
 8000e66:	f7ff fc95 	bl	8000794 <__aeabi_ddiv>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <main+0x18c>)
 8000e78:	f7ff f9ac 	bl	80001d4 <__adddf3>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	ec43 2b17 	vmov	d7, r2, r3
 8000e84:	eeb0 0a47 	vmov.f32	s0, s14
 8000e88:	eef0 0a67 	vmov.f32	s1, s15
 8000e8c:	f002 ff38 	bl	8003d00 <sin>
 8000e90:	ec53 2b10 	vmov	r2, r3, d0
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f7ff fb52 	bl	8000540 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	0fda      	lsrs	r2, r3, #31
 8000eac:	4413      	add	r3, r2
 8000eae:	105b      	asrs	r3, r3, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fadb 	bl	800046c <__aeabi_i2d>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4620      	mov	r0, r4
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f7ff f989 	bl	80001d4 <__adddf3>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fdfb 	bl	8000ac4 <__aeabi_d2uiz>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000edc:	440b      	add	r3, r1
 8000ede:	f823 2cd8 	strh.w	r2, [r3, #-216]
	  buffer[i] = buffer[i] << 4;
 8000ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000eec:	4413      	add	r3, r2
 8000eee:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000f00:	440b      	add	r3, r1
 8000f02:	f823 2cd8 	strh.w	r2, [r3, #-216]
  for(i = 0; i < NBR_OF_SAMPLES; i++)
 8000f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f14:	2b63      	cmp	r3, #99	; 0x63
 8000f16:	d98b      	bls.n	8000e30 <main+0x30>
  }

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	481d      	ldr	r0, [pc, #116]	; (8000f90 <main+0x190>)
 8000f1c:	f000 fc3f 	bl	800179e <HAL_DAC_Start>

  uint32_t time = HAL_GetTick();
 8000f20:	f000 fb06 	bl	8001530 <HAL_GetTick>
 8000f24:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  uint32_t max_time = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - time) >= max_time)
 8000f34:	f000 fafc 	bl	8001530 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f5      	bhi.n	8000f34 <main+0x134>
	  {
		  time = HAL_GetTick();
 8000f48:	f000 faf2 	bl	8001530 <HAL_GetTick>
 8000f4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_L, buffer[i]);
 8000f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f833 3cd8 	ldrh.w	r3, [r3, #-216]
 8000f60:	2204      	movs	r2, #4
 8000f62:	2100      	movs	r1, #0
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <main+0x190>)
 8000f66:	f000 fc67 	bl	8001838 <HAL_DAC_SetValue>

		  i++;
 8000f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

		  if(i >= 100)
 8000f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f78:	2b63      	cmp	r3, #99	; 0x63
 8000f7a:	d9db      	bls.n	8000f34 <main+0x134>
		  {
			  i = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  if((HAL_GetTick() - time) >= max_time)
 8000f82:	e7d7      	b.n	8000f34 <main+0x134>
 8000f84:	f3af 8000 	nop.w
 8000f88:	40590000 	.word	0x40590000
 8000f8c:	3ff00000 	.word	0x3ff00000
 8000f90:	20000028 	.word	0x20000028
 8000f94:	54442d18 	.word	0x54442d18
 8000f98:	401921fb 	.word	0x401921fb

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b8      	sub	sp, #224	; 0xe0
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa6:	2244      	movs	r2, #68	; 0x44
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fe9e 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2288      	movs	r2, #136	; 0x88
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fe90 	bl	8003cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100e:	4618      	mov	r0, r3
 8001010:	f000 ff60 	bl	8001ed4 <HAL_RCC_OscConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800101a:	f000 f8e9 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2303      	movs	r3, #3
 8001026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800103c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001040:	2104      	movs	r1, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fb2c 	bl	80026a0 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800104e:	f000 f8cf 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001052:	2302      	movs	r3, #2
 8001054:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001056:	2300      	movs	r3, #0
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fd25 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001068:	f000 f8c2 	bl	80011f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800106c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001070:	f000 feda 	bl	8001e28 <HAL_PWREx_ControlVoltageScaling>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800107a:	f000 f8b9 	bl	80011f0 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	37e0      	adds	r7, #224	; 0xe0
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2224      	movs	r2, #36	; 0x24
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fe29 	bl	8003cec <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_DAC1_Init+0x5c>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_DAC1_Init+0x60>)
 800109e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <MX_DAC1_Init+0x5c>)
 80010a2:	f000 fb5a 	bl	800175a <HAL_DAC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010ac:	f000 f8a0 	bl	80011f0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_DAC1_Init+0x5c>)
 80010cc:	f000 fbd9 	bl	8001882 <HAL_DAC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 f88b 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000028 	.word	0x20000028
 80010e8:	40007400 	.word	0x40007400

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_USART2_UART_Init+0x58>)
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <MX_USART2_UART_Init+0x5c>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_USART2_UART_Init+0x58>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART2_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART2_UART_Init+0x58>)
 8001130:	f002 f978 	bl	8003424 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800113a:	f000 f859 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000003c 	.word	0x2000003c
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_GPIO_Init+0x98>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <MX_GPIO_Init+0x98>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_GPIO_Init+0x98>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_GPIO_Init+0x98>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <MX_GPIO_Init+0x98>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_GPIO_Init+0x98>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_GPIO_Init+0x9c>)
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_GPIO_Init+0xa0>)
 80011d8:	f000 fc6e 	bl	8001ab8 <HAL_GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	48000800 	.word	0x48000800

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <HAL_DAC_MspInit+0x74>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d124      	bne.n	80012b0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_DAC_MspInit+0x78>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_DAC_MspInit+0x78>)
 800126c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_DAC_MspInit+0x78>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_DAC_MspInit+0x78>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_DAC_MspInit+0x78>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_DAC_MspInit+0x78>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001296:	2310      	movs	r3, #16
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f000 fc04 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40007400 	.word	0x40007400
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d128      	bne.n	8001334 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_UART_MspInit+0x80>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <HAL_UART_MspInit+0x80>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_UART_MspInit+0x80>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_UART_MspInit+0x80>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_UART_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_UART_MspInit+0x80>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001312:	230c      	movs	r3, #12
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001322:	2307      	movs	r3, #7
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fbc2 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40004400 	.word	0x40004400
 8001340:	40021000 	.word	0x40021000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f8ba 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <SystemInit+0x5c>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <SystemInit+0x5c>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <SystemInit+0x60>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <SystemInit+0x60>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <SystemInit+0x60>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SystemInit+0x60>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <SystemInit+0x60>)
 80013c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <SystemInit+0x60>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SystemInit+0x60>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <SystemInit+0x60>)
 80013dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SystemInit+0x60>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	40021000 	.word	0x40021000

080013fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001400:	f7ff ffca 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001406:	e003      	b.n	8001410 <LoopCopyDataInit>

08001408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800140a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800140c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800140e:	3104      	adds	r1, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001418:	d3f6      	bcc.n	8001408 <CopyDataInit>
	ldr	r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800141c:	e002      	b.n	8001424 <LoopFillZerobss>

0800141e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800141e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001420:	f842 3b04 	str.w	r3, [r2], #4

08001424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <LoopForever+0x16>)
	cmp	r2, r3
 8001426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001428:	d3f9      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 fc3b 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142e:	f7ff fce7 	bl	8000e00 <main>

08001432 <LoopForever>:

LoopForever:
    b LoopForever
 8001432:	e7fe      	b.n	8001432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001434:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001438:	08004fb8 	.word	0x08004fb8
	ldr	r0, =_sdata
 800143c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001440:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001444:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001448:	200000c4 	.word	0x200000c4

0800144c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_2_IRQHandler>
	...

08001450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_Init+0x3c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_Init+0x3c>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001466:	2003      	movs	r0, #3
 8001468:	f000 f944 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146c:	2000      	movs	r0, #0
 800146e:	f000 f80f 	bl	8001490 <HAL_InitTick>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	e001      	b.n	8001482 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800147e:	f7ff febd 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001482:	79fb      	ldrb	r3, [r7, #7]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40022000 	.word	0x40022000

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_InitTick+0x70>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f941 	bl	8001742 <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d809      	bhi.n	80014e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f919 	bl	800170a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_InitTick+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e007      	b.n	80014f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e004      	b.n	80014f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	200000c0 	.word	0x200000c0

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200000c0 	.word	0x200000c0

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff47 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5c 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e014      	b.n	8001796 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fd61 	bl	8001244 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	795b      	ldrb	r3, [r3, #5]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_DAC_Start+0x16>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e03b      	b.n	800182c <HAL_DAC_Start+0x8e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2201      	movs	r2, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d118      	bne.n	800181e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	e00f      	b.n	800181e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800180c:	d107      	bne.n	800181e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0202 	orr.w	r2, r2, #2
 800181c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	3308      	adds	r3, #8
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e004      	b.n	800186c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	3314      	adds	r3, #20
 800186a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	461a      	mov	r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b088      	sub	sp, #32
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	795b      	ldrb	r3, [r3, #5]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_DAC_ConfigChannel+0x1c>
 800189a:	2302      	movs	r3, #2
 800189c:	e107      	b.n	8001aae <HAL_DAC_ConfigChannel+0x22c>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d174      	bne.n	800199c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fe3d 	bl	8001530 <HAL_GetTick>
 80018b6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d134      	bne.n	8001928 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018be:	e011      	b.n	80018e4 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80018c0:	f7ff fe36 	bl	8001530 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d90a      	bls.n	80018e4 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f043 0208 	orr.w	r2, r3, #8
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2203      	movs	r2, #3
 80018de:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0e4      	b.n	8001aae <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e6      	bne.n	80018c0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff fe28 	bl	8001548 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	6992      	ldr	r2, [r2, #24]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
 8001902:	e01e      	b.n	8001942 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001904:	f7ff fe14 	bl	8001530 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d90a      	bls.n	8001928 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f043 0208 	orr.w	r2, r3, #8
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2203      	movs	r2, #3
 8001922:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c2      	b.n	8001aae <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2b00      	cmp	r3, #0
 8001930:	dbe8      	blt.n	8001904 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fe08 	bl	8001548 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	6992      	ldr	r2, [r2, #24]
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	ea02 0103 	and.w	r1, r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	21ff      	movs	r1, #255	; 0xff
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	ea02 0103 	and.w	r1, r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d11d      	bne.n	80019e0 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	22c0      	movs	r2, #192	; 0xc0
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e17f      	b.n	8001dc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8171 	beq.w	8001dc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d00b      	beq.n	8001b00 <HAL_GPIO_Init+0x48>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d007      	beq.n	8001b00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af4:	2b11      	cmp	r3, #17
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b36:	2201      	movs	r2, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0201 	and.w	r2, r3, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d118      	bne.n	8001ba0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x128>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b12      	cmp	r3, #18
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	6939      	ldr	r1, [r7, #16]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80ac 	beq.w	8001dc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6613      	str	r3, [r2, #96]	; 0x60
 8001c76:	4b5c      	ldr	r3, [pc, #368]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x242>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <HAL_GPIO_Init+0x338>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x23e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	; (8001df4 <HAL_GPIO_Init+0x33c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x23a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <HAL_GPIO_Init+0x340>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x236>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4c      	ldr	r2, [pc, #304]	; (8001dfc <HAL_GPIO_Init+0x344>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x232>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4b      	ldr	r2, [pc, #300]	; (8001e00 <HAL_GPIO_Init+0x348>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x22e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <HAL_GPIO_Init+0x34c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x22a>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00c      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00a      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x244>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	f002 0203 	and.w	r2, r2, #3
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d0c:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d3e:	4a32      	ldr	r2, [pc, #200]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d68:	4a27      	ldr	r2, [pc, #156]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f47f ae78 	bne.w	8001ac8 <HAL_GPIO_Init+0x10>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	48000400 	.word	0x48000400
 8001df4:	48000800 	.word	0x48000800
 8001df8:	48000c00 	.word	0x48000c00
 8001dfc:	48001000 	.word	0x48001000
 8001e00:	48001400 	.word	0x48001400
 8001e04:	48001800 	.word	0x48001800
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e36:	d130      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d038      	beq.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2232      	movs	r2, #50	; 0x32
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e6c:	e002      	b.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d102      	bne.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f2      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e94:	d110      	bne.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e00f      	b.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d007      	beq.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e3d4      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee6:	4ba1      	ldr	r3, [pc, #644]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef0:	4b9e      	ldr	r3, [pc, #632]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80e4 	beq.w	80020d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_RCC_OscConfig+0x4a>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b0c      	cmp	r3, #12
 8001f12:	f040 808b 	bne.w	800202c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f040 8087 	bne.w	800202c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1e:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x62>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e3ac      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	4b8c      	ldr	r3, [pc, #560]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_RCC_OscConfig+0x7c>
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_OscConfig+0x88>
 8001f50:	4b86      	ldr	r3, [pc, #536]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d223      	bcs.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fd41 	bl	80029ec <RCC_SetFlashLatencyFromMSIRange>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e38d      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f74:	4b7d      	ldr	r3, [pc, #500]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b7a      	ldr	r3, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4977      	ldr	r1, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4972      	ldr	r1, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
 8001fa6:	e025      	b.n	8001ff4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa8:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6f      	ldr	r2, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	496a      	ldr	r1, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc6:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	4965      	ldr	r1, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fd01 	bl	80029ec <RCC_SetFlashLatencyFromMSIRange>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e34d      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff4:	f000 fc36 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	495a      	ldr	r1, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0x29c>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_OscConfig+0x2a0>)
 8002012:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x2a4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fa39 	bl	8001490 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d052      	beq.n	80020ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	e331      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d032      	beq.n	800209a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002034:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002040:	f7ff fa76 	bl	8001530 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002048:	f7ff fa72 	bl	8001530 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e31a      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a40      	ldr	r2, [pc, #256]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	493b      	ldr	r1, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4936      	ldr	r1, [pc, #216]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 8002098:	e01a      	b.n	80020d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_RCC_OscConfig+0x298>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa43 	bl	8001530 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ae:	f7ff fa3f 	bl	8001530 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e2e7      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_OscConfig+0x298>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x1da>
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d074      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x21a>
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d10e      	bne.n	8002106 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_OscConfig+0x298>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d064      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d160      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e2c4      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x24a>
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e01d      	b.n	800215a <HAL_RCC_OscConfig+0x286>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002126:	d10c      	bne.n	8002142 <HAL_RCC_OscConfig+0x26e>
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800212e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x298>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x286>
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x298>)
 8002154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01c      	beq.n	800219c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff f9e5 	bl	8001530 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002168:	e011      	b.n	800218e <HAL_RCC_OscConfig+0x2ba>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	08004d88 	.word	0x08004d88
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff f9d8 	bl	8001530 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e280      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218e:	4baf      	ldr	r3, [pc, #700]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x2a8>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f9c8 	bl	8001530 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff f9c4 	bl	8001530 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e26c      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b6:	4ba5      	ldr	r3, [pc, #660]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2d0>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d060      	beq.n	8002294 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x310>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d119      	bne.n	8002212 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d116      	bne.n	8002212 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	4b99      	ldr	r3, [pc, #612]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x328>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e249      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b93      	ldr	r3, [pc, #588]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	4990      	ldr	r1, [pc, #576]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	e040      	b.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a8b      	ldr	r2, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f983 	bl	8001530 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff f97f 	bl	8001530 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e227      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b82      	ldr	r3, [pc, #520]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	497c      	ldr	r1, [pc, #496]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a79      	ldr	r2, [pc, #484]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff f95f 	bl	8001530 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002276:	f7ff f95b 	bl	8001530 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e203      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03c      	beq.n	800231a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	4a67      	ldr	r2, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7ff f93a 	bl	8001530 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff f936 	bl	8001530 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1de      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d2:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80022d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCC_OscConfig+0x3ec>
 80022e0:	e01b      	b.n	800231a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e2:	4b5a      	ldr	r3, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80022e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7ff f91d 	bl	8001530 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fa:	f7ff f919 	bl	8001530 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1c1      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800230c:	4b4f      	ldr	r3, [pc, #316]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ef      	bne.n	80022fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a6 	beq.w	8002474 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800232c:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10d      	bne.n	8002354 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	6593      	str	r3, [r2, #88]	; 0x58
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x578>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002350:	2301      	movs	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCC_OscConfig+0x57c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d118      	bne.n	8002392 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_OscConfig+0x57c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <HAL_RCC_OscConfig+0x57c>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236c:	f7ff f8e0 	bl	8001530 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002374:	f7ff f8dc 	bl	8001530 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e184      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_RCC_OscConfig+0x57c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x4d8>
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023aa:	e024      	b.n	80023f6 <HAL_RCC_OscConfig+0x522>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d110      	bne.n	80023d6 <HAL_RCC_OscConfig+0x502>
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a24      	ldr	r2, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d4:	e00f      	b.n	80023f6 <HAL_RCC_OscConfig+0x522>
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_RCC_OscConfig+0x578>)
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff f897 	bl	8001530 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff f893 	bl	8001530 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e139      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x578>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ed      	beq.n	8002406 <HAL_RCC_OscConfig+0x532>
 800242a:	e01a      	b.n	8002462 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff f880 	bl	8001530 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002432:	e00f      	b.n	8002454 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7ff f87c 	bl	8001530 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d906      	bls.n	8002454 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e122      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002454:	4b90      	ldr	r3, [pc, #576]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e8      	bne.n	8002434 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002462:	7ffb      	ldrb	r3, [r7, #31]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8108 	beq.w	800268e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b02      	cmp	r3, #2
 8002484:	f040 80d0 	bne.w	8002628 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002488:	4b83      	ldr	r3, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	429a      	cmp	r2, r3
 800249a:	d130      	bne.n	80024fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	3b01      	subs	r3, #1
 80024a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d127      	bne.n	80024fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11f      	bne.n	80024fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c8:	2a07      	cmp	r2, #7
 80024ca:	bf14      	ite	ne
 80024cc:	2201      	movne	r2, #1
 80024ce:	2200      	moveq	r2, #0
 80024d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d113      	bne.n	80024fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d06e      	beq.n	80025dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	d069      	beq.n	80025d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b7      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002520:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800252c:	f7ff f800 	bl	8001530 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fffc 	bl	8001530 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e0a4      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	4b54      	ldr	r3, [pc, #336]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_RCC_OscConfig+0x7c8>)
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002562:	3a01      	subs	r2, #1
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800256c:	0212      	lsls	r2, r2, #8
 800256e:	4311      	orrs	r1, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002574:	0852      	lsrs	r2, r2, #1
 8002576:	3a01      	subs	r2, #1
 8002578:	0552      	lsls	r2, r2, #21
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002580:	0852      	lsrs	r2, r2, #1
 8002582:	3a01      	subs	r2, #1
 8002584:	0652      	lsls	r2, r2, #25
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800258c:	0912      	lsrs	r2, r2, #4
 800258e:	0452      	lsls	r2, r2, #17
 8002590:	430a      	orrs	r2, r1
 8002592:	4941      	ldr	r1, [pc, #260]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a4:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b0:	f7fe ffbe 	bl	8001530 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe ffba 	bl	8001530 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e062      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d6:	e05a      	b.n	800268e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e059      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025dc:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d152      	bne.n	800268e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002600:	f7fe ff96 	bl	8001530 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe ff92 	bl	8001530 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03a      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x734>
 8002626:	e032      	b.n	800268e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d02d      	beq.n	800268a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002638:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800264c:	f023 0303 	bic.w	r3, r3, #3
 8002650:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 8002658:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800265c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002660:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe ff65 	bl	8001530 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe ff61 	bl	8001530 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e009      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x7c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x796>
 8002688:	e001      	b.n	800268e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	f99d808c 	.word	0xf99d808c

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0c8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4961      	ldr	r1, [pc, #388]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d04c      	beq.n	800278a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f8:	4b56      	ldr	r3, [pc, #344]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d121      	bne.n	8002748 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e09e      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d115      	bne.n	8002748 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e092      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e086      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e07e      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 0203 	bic.w	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	493f      	ldr	r1, [pc, #252]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275a:	f7fe fee9 	bl	8001530 <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002760:	e00a      	b.n	8002778 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fee5 	bl	8001530 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e066      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 020c 	and.w	r2, r3, #12
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	429a      	cmp	r2, r3
 8002788:	d1eb      	bne.n	8002762 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	492c      	ldr	r1, [pc, #176]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4924      	ldr	r1, [pc, #144]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_ClockConfig+0x1b0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e036      	b.n	8002846 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4918      	ldr	r1, [pc, #96]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4910      	ldr	r1, [pc, #64]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002816:	f000 f825 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490c      	ldr	r1, [pc, #48]	; (8002858 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fe28 	bl	8001490 <HAL_InitTick>
 8002840:	4603      	mov	r3, r0
 8002842:	72fb      	strb	r3, [r7, #11]

  return status;
 8002844:	7afb      	ldrb	r3, [r7, #11]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	08004d88 	.word	0x08004d88
 800285c:	20000000 	.word	0x20000000
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x34>
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d11e      	bne.n	80028d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e005      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028c0:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_RCC_GetSysClockFreq+0x110>)
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e004      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_GetSysClockFreq+0x114>)
 80028ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d134      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0xa6>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d003      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0xac>
 8002908:	e005      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_RCC_GetSysClockFreq+0x110>)
 800290c:	617b      	str	r3, [r7, #20]
      break;
 800290e:	e005      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_GetSysClockFreq+0x114>)
 8002912:	617b      	str	r3, [r7, #20]
      break;
 8002914:	e002      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	617b      	str	r3, [r7, #20]
      break;
 800291a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	3301      	adds	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	fb02 f203 	mul.w	r2, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	0e5b      	lsrs	r3, r3, #25
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	3301      	adds	r3, #1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800295c:	69bb      	ldr	r3, [r7, #24]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	08004da0 	.word	0x08004da0
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200

0800297c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_RCC_GetHCLKFreq+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002998:	f7ff fff0 	bl	800297c <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08004d98 	.word	0x08004d98

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c4:	f7ff ffda 	bl	800297c <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4904      	ldr	r1, [pc, #16]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08004d98 	.word	0x08004d98

080029ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a04:	f7ff fa02 	bl	8001e0c <HAL_PWREx_GetVoltageRange>
 8002a08:	6178      	str	r0, [r7, #20]
 8002a0a:	e014      	b.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6593      	str	r3, [r2, #88]	; 0x58
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a24:	f7ff f9f2 	bl	8001e0c <HAL_PWREx_GetVoltageRange>
 8002a28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3c:	d10b      	bne.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d919      	bls.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2ba0      	cmp	r3, #160	; 0xa0
 8002a48:	d902      	bls.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e013      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a50:	2301      	movs	r3, #1
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e010      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d902      	bls.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	e00a      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d102      	bne.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a68:	2302      	movs	r3, #2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	e004      	b.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b70      	cmp	r3, #112	; 0x70
 8002a72:	d101      	bne.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a74:	2301      	movs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 0207 	bic.w	r2, r3, #7
 8002a80:	4909      	ldr	r1, [pc, #36]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40022000 	.word	0x40022000

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d041      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002acc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad0:	d02a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ad2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad6:	d824      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae2:	d81e      	bhi.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aec:	d010      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aee:	e018      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002af0:	4b86      	ldr	r3, [pc, #536]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a85      	ldr	r2, [pc, #532]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afc:	e015      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fabb 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0e:	e00c      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3320      	adds	r3, #32
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fba6 	bl	8003268 <RCCEx_PLLSAI2_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	74fb      	strb	r3, [r7, #19]
      break;
 8002b26:	e000      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b30:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3e:	4973      	ldr	r1, [pc, #460]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b46:	e001      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d041      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b60:	d02a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b66:	d824      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b72:	d81e      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7e:	e018      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b80:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a61      	ldr	r2, [pc, #388]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b8c:	e015      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fa73 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9e:	e00c      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fb5e 	bl	8003268 <RCCEx_PLLSAI2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bb6:	e000      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bc0:	4b52      	ldr	r3, [pc, #328]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bce:	494f      	ldr	r1, [pc, #316]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bd6:	e001      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a0 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c10:	4b3e      	ldr	r3, [pc, #248]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fc80 	bl	8001530 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c32:	e009      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fe fc7c 	bl	8001530 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d902      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	74fb      	strb	r3, [r7, #19]
        break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ef      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d15c      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01f      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d019      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca4:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fc3b 	bl	8001530 <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fc37 	bl	8001530 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd4:	e006      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ec      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfa:	4904      	ldr	r1, [pc, #16]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d02:	e009      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	74bb      	strb	r3, [r7, #18]
 8002d08:	e006      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d18:	7c7b      	ldrb	r3, [r7, #17]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a9d      	ldr	r2, [pc, #628]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d36:	4b98      	ldr	r3, [pc, #608]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	4994      	ldr	r1, [pc, #592]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d58:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 020c 	bic.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	498c      	ldr	r1, [pc, #560]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d7a:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4983      	ldr	r1, [pc, #524]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	497b      	ldr	r1, [pc, #492]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	4972      	ldr	r1, [pc, #456]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002de0:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	496a      	ldr	r1, [pc, #424]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	4961      	ldr	r1, [pc, #388]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e24:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	4959      	ldr	r1, [pc, #356]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	4950      	ldr	r1, [pc, #320]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e68:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	4948      	ldr	r1, [pc, #288]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	493f      	ldr	r1, [pc, #252]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d028      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eca:	d106      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
 8002ed8:	e011      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f8c8 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d028      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	491f      	ldr	r1, [pc, #124]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f28:	d106      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f34:	60d3      	str	r3, [r2, #12]
 8002f36:	e011      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f899 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d02b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f86:	d109      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a02      	ldr	r2, [pc, #8]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
 8002f94:	e014      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f867 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02f      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fda:	4928      	ldr	r1, [pc, #160]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fea:	d10d      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f844 	bl	8003080 <RCCEx_PLLSAI1_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d014      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	74bb      	strb	r3, [r7, #18]
 8003006:	e011      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003010:	d10c      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3320      	adds	r3, #32
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f925 	bl	8003268 <RCCEx_PLLSAI2_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003072:	7cbb      	ldrb	r3, [r7, #18]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308e:	4b75      	ldr	r3, [pc, #468]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d018      	beq.n	80030cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800309a:	4b72      	ldr	r3, [pc, #456]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10d      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
       ||
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030b2:	4b6c      	ldr	r3, [pc, #432]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
       ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d047      	beq.n	8003156 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e044      	b.n	8003156 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d018      	beq.n	8003106 <RCCEx_PLLSAI1_Config+0x86>
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d825      	bhi.n	8003124 <RCCEx_PLLSAI1_Config+0xa4>
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d002      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x62>
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d009      	beq.n	80030f4 <RCCEx_PLLSAI1_Config+0x74>
 80030e0:	e020      	b.n	8003124 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030e2:	4b60      	ldr	r3, [pc, #384]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11d      	bne.n	800312a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f2:	e01a      	b.n	800312a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f4:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e013      	b.n	800312e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003106:	4b57      	ldr	r3, [pc, #348]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003112:	4b54      	ldr	r3, [pc, #336]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003122:	e006      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e004      	b.n	8003134 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312a:	bf00      	nop
 800312c:	e002      	b.n	8003134 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003132:	bf00      	nop
    }

    if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800313a:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	430b      	orrs	r3, r1
 8003150:	4944      	ldr	r1, [pc, #272]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d17d      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800315c:	4b41      	ldr	r3, [pc, #260]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a40      	ldr	r2, [pc, #256]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003162:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003168:	f7fe f9e2 	bl	8001530 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316e:	e009      	b.n	8003184 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003170:	f7fe f9de 	bl	8001530 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	73fb      	strb	r3, [r7, #15]
        break;
 8003182:	e005      	b.n	8003190 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003184:	4b37      	ldr	r3, [pc, #220]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ef      	bne.n	8003170 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d160      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d111      	bne.n	80031c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6892      	ldr	r2, [r2, #8]
 80031ac:	0211      	lsls	r1, r2, #8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	0912      	lsrs	r2, r2, #4
 80031b4:	0452      	lsls	r2, r2, #17
 80031b6:	430a      	orrs	r2, r1
 80031b8:	492a      	ldr	r1, [pc, #168]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
 80031be:	e027      	b.n	8003210 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d112      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6892      	ldr	r2, [r2, #8]
 80031d6:	0211      	lsls	r1, r2, #8
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6912      	ldr	r2, [r2, #16]
 80031dc:	0852      	lsrs	r2, r2, #1
 80031de:	3a01      	subs	r2, #1
 80031e0:	0552      	lsls	r2, r2, #21
 80031e2:	430a      	orrs	r2, r1
 80031e4:	491f      	ldr	r1, [pc, #124]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]
 80031ea:	e011      	b.n	8003210 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6952      	ldr	r2, [r2, #20]
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0652      	lsls	r2, r2, #25
 8003208:	430a      	orrs	r2, r1
 800320a:	4916      	ldr	r1, [pc, #88]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a13      	ldr	r2, [pc, #76]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003216:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800321a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f988 	bl	8001530 <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003222:	e009      	b.n	8003238 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003224:	f7fe f984 	bl	8001530 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	73fb      	strb	r3, [r7, #15]
          break;
 8003236:	e005      	b.n	8003244 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	4904      	ldr	r1, [pc, #16]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000

08003268 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0203 	and.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d10d      	bne.n	80032ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
       ||
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800329a:	4b61      	ldr	r3, [pc, #388]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
       ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d047      	beq.n	800333e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	e044      	b.n	800333e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d018      	beq.n	80032ee <RCCEx_PLLSAI2_Config+0x86>
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d825      	bhi.n	800330c <RCCEx_PLLSAI2_Config+0xa4>
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d002      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x62>
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d009      	beq.n	80032dc <RCCEx_PLLSAI2_Config+0x74>
 80032c8:	e020      	b.n	800330c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032ca:	4b55      	ldr	r3, [pc, #340]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11d      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032da:	e01a      	b.n	8003312 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e013      	b.n	8003316 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ee:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800330a:	e006      	b.n	800331a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e004      	b.n	800331c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003312:	bf00      	nop
 8003314:	e002      	b.n	800331c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800331a:	bf00      	nop
    }

    if(status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	430b      	orrs	r3, r1
 8003338:	4939      	ldr	r1, [pc, #228]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d167      	bne.n	8003414 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a35      	ldr	r2, [pc, #212]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe f8ee 	bl	8001530 <HAL_GetTick>
 8003354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003356:	e009      	b.n	800336c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003358:	f7fe f8ea 	bl	8001530 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	73fb      	strb	r3, [r7, #15]
        break;
 800336a:	e005      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ef      	bne.n	8003358 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d14a      	bne.n	8003414 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003384:	4b26      	ldr	r3, [pc, #152]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	0211      	lsls	r1, r2, #8
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	0912      	lsrs	r2, r2, #4
 800339c:	0452      	lsls	r2, r2, #17
 800339e:	430a      	orrs	r2, r1
 80033a0:	491f      	ldr	r1, [pc, #124]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	614b      	str	r3, [r1, #20]
 80033a6:	e011      	b.n	80033cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6892      	ldr	r2, [r2, #8]
 80033b8:	0211      	lsls	r1, r2, #8
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6912      	ldr	r2, [r2, #16]
 80033be:	0852      	lsrs	r2, r2, #1
 80033c0:	3a01      	subs	r2, #1
 80033c2:	0652      	lsls	r2, r2, #25
 80033c4:	430a      	orrs	r2, r1
 80033c6:	4916      	ldr	r1, [pc, #88]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe f8aa 	bl	8001530 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033e0:	f7fe f8a6 	bl	8001530 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
          break;
 80033f2:	e005      	b.n	8003400 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ef      	beq.n	80033e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4904      	ldr	r1, [pc, #16]	; (8003420 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	4313      	orrs	r3, r2
 8003412:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e040      	b.n	80034b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd ff3a 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f82c 	bl	80034c0 <UART_SetConfig>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e022      	b.n	80034b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 faaa 	bl	80039d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800349e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb31 	bl	8003b18 <UART_CheckIdleState>
 80034b6:	4603      	mov	r3, r0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4bad      	ldr	r3, [pc, #692]	; (80037a0 <UART_SetConfig+0x2e0>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	69f9      	ldr	r1, [r7, #28]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4aa2      	ldr	r2, [pc, #648]	; (80037a4 <UART_SetConfig+0x2e4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	4313      	orrs	r3, r2
 8003526:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a99      	ldr	r2, [pc, #612]	; (80037a8 <UART_SetConfig+0x2e8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d121      	bne.n	800358a <UART_SetConfig+0xca>
 8003546:	4b99      	ldr	r3, [pc, #612]	; (80037ac <UART_SetConfig+0x2ec>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b03      	cmp	r3, #3
 8003552:	d817      	bhi.n	8003584 <UART_SetConfig+0xc4>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x9c>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003579 	.word	0x08003579
 8003564:	08003573 	.word	0x08003573
 8003568:	0800357f 	.word	0x0800357f
 800356c:	2301      	movs	r3, #1
 800356e:	76fb      	strb	r3, [r7, #27]
 8003570:	e0e7      	b.n	8003742 <UART_SetConfig+0x282>
 8003572:	2302      	movs	r3, #2
 8003574:	76fb      	strb	r3, [r7, #27]
 8003576:	e0e4      	b.n	8003742 <UART_SetConfig+0x282>
 8003578:	2304      	movs	r3, #4
 800357a:	76fb      	strb	r3, [r7, #27]
 800357c:	e0e1      	b.n	8003742 <UART_SetConfig+0x282>
 800357e:	2308      	movs	r3, #8
 8003580:	76fb      	strb	r3, [r7, #27]
 8003582:	e0de      	b.n	8003742 <UART_SetConfig+0x282>
 8003584:	2310      	movs	r3, #16
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e0db      	b.n	8003742 <UART_SetConfig+0x282>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a88      	ldr	r2, [pc, #544]	; (80037b0 <UART_SetConfig+0x2f0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d132      	bne.n	80035fa <UART_SetConfig+0x13a>
 8003594:	4b85      	ldr	r3, [pc, #532]	; (80037ac <UART_SetConfig+0x2ec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d828      	bhi.n	80035f4 <UART_SetConfig+0x134>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0xe8>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080035f5 	.word	0x080035f5
 80035b0:	080035f5 	.word	0x080035f5
 80035b4:	080035f5 	.word	0x080035f5
 80035b8:	080035e9 	.word	0x080035e9
 80035bc:	080035f5 	.word	0x080035f5
 80035c0:	080035f5 	.word	0x080035f5
 80035c4:	080035f5 	.word	0x080035f5
 80035c8:	080035e3 	.word	0x080035e3
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035f5 	.word	0x080035f5
 80035d8:	080035ef 	.word	0x080035ef
 80035dc:	2300      	movs	r3, #0
 80035de:	76fb      	strb	r3, [r7, #27]
 80035e0:	e0af      	b.n	8003742 <UART_SetConfig+0x282>
 80035e2:	2302      	movs	r3, #2
 80035e4:	76fb      	strb	r3, [r7, #27]
 80035e6:	e0ac      	b.n	8003742 <UART_SetConfig+0x282>
 80035e8:	2304      	movs	r3, #4
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e0a9      	b.n	8003742 <UART_SetConfig+0x282>
 80035ee:	2308      	movs	r3, #8
 80035f0:	76fb      	strb	r3, [r7, #27]
 80035f2:	e0a6      	b.n	8003742 <UART_SetConfig+0x282>
 80035f4:	2310      	movs	r3, #16
 80035f6:	76fb      	strb	r3, [r7, #27]
 80035f8:	e0a3      	b.n	8003742 <UART_SetConfig+0x282>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6d      	ldr	r2, [pc, #436]	; (80037b4 <UART_SetConfig+0x2f4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d120      	bne.n	8003646 <UART_SetConfig+0x186>
 8003604:	4b69      	ldr	r3, [pc, #420]	; (80037ac <UART_SetConfig+0x2ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800360e:	2b30      	cmp	r3, #48	; 0x30
 8003610:	d013      	beq.n	800363a <UART_SetConfig+0x17a>
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d814      	bhi.n	8003640 <UART_SetConfig+0x180>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d009      	beq.n	800362e <UART_SetConfig+0x16e>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d810      	bhi.n	8003640 <UART_SetConfig+0x180>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <UART_SetConfig+0x168>
 8003622:	2b10      	cmp	r3, #16
 8003624:	d006      	beq.n	8003634 <UART_SetConfig+0x174>
 8003626:	e00b      	b.n	8003640 <UART_SetConfig+0x180>
 8003628:	2300      	movs	r3, #0
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e089      	b.n	8003742 <UART_SetConfig+0x282>
 800362e:	2302      	movs	r3, #2
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e086      	b.n	8003742 <UART_SetConfig+0x282>
 8003634:	2304      	movs	r3, #4
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e083      	b.n	8003742 <UART_SetConfig+0x282>
 800363a:	2308      	movs	r3, #8
 800363c:	76fb      	strb	r3, [r7, #27]
 800363e:	e080      	b.n	8003742 <UART_SetConfig+0x282>
 8003640:	2310      	movs	r3, #16
 8003642:	76fb      	strb	r3, [r7, #27]
 8003644:	e07d      	b.n	8003742 <UART_SetConfig+0x282>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <UART_SetConfig+0x2f8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d120      	bne.n	8003692 <UART_SetConfig+0x1d2>
 8003650:	4b56      	ldr	r3, [pc, #344]	; (80037ac <UART_SetConfig+0x2ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800365a:	2bc0      	cmp	r3, #192	; 0xc0
 800365c:	d013      	beq.n	8003686 <UART_SetConfig+0x1c6>
 800365e:	2bc0      	cmp	r3, #192	; 0xc0
 8003660:	d814      	bhi.n	800368c <UART_SetConfig+0x1cc>
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d009      	beq.n	800367a <UART_SetConfig+0x1ba>
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d810      	bhi.n	800368c <UART_SetConfig+0x1cc>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <UART_SetConfig+0x1b4>
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d006      	beq.n	8003680 <UART_SetConfig+0x1c0>
 8003672:	e00b      	b.n	800368c <UART_SetConfig+0x1cc>
 8003674:	2300      	movs	r3, #0
 8003676:	76fb      	strb	r3, [r7, #27]
 8003678:	e063      	b.n	8003742 <UART_SetConfig+0x282>
 800367a:	2302      	movs	r3, #2
 800367c:	76fb      	strb	r3, [r7, #27]
 800367e:	e060      	b.n	8003742 <UART_SetConfig+0x282>
 8003680:	2304      	movs	r3, #4
 8003682:	76fb      	strb	r3, [r7, #27]
 8003684:	e05d      	b.n	8003742 <UART_SetConfig+0x282>
 8003686:	2308      	movs	r3, #8
 8003688:	76fb      	strb	r3, [r7, #27]
 800368a:	e05a      	b.n	8003742 <UART_SetConfig+0x282>
 800368c:	2310      	movs	r3, #16
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e057      	b.n	8003742 <UART_SetConfig+0x282>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a49      	ldr	r2, [pc, #292]	; (80037bc <UART_SetConfig+0x2fc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d125      	bne.n	80036e8 <UART_SetConfig+0x228>
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <UART_SetConfig+0x2ec>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036aa:	d017      	beq.n	80036dc <UART_SetConfig+0x21c>
 80036ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b0:	d817      	bhi.n	80036e2 <UART_SetConfig+0x222>
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b6:	d00b      	beq.n	80036d0 <UART_SetConfig+0x210>
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036bc:	d811      	bhi.n	80036e2 <UART_SetConfig+0x222>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <UART_SetConfig+0x20a>
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c6:	d006      	beq.n	80036d6 <UART_SetConfig+0x216>
 80036c8:	e00b      	b.n	80036e2 <UART_SetConfig+0x222>
 80036ca:	2300      	movs	r3, #0
 80036cc:	76fb      	strb	r3, [r7, #27]
 80036ce:	e038      	b.n	8003742 <UART_SetConfig+0x282>
 80036d0:	2302      	movs	r3, #2
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	e035      	b.n	8003742 <UART_SetConfig+0x282>
 80036d6:	2304      	movs	r3, #4
 80036d8:	76fb      	strb	r3, [r7, #27]
 80036da:	e032      	b.n	8003742 <UART_SetConfig+0x282>
 80036dc:	2308      	movs	r3, #8
 80036de:	76fb      	strb	r3, [r7, #27]
 80036e0:	e02f      	b.n	8003742 <UART_SetConfig+0x282>
 80036e2:	2310      	movs	r3, #16
 80036e4:	76fb      	strb	r3, [r7, #27]
 80036e6:	e02c      	b.n	8003742 <UART_SetConfig+0x282>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <UART_SetConfig+0x2e4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d125      	bne.n	800373e <UART_SetConfig+0x27e>
 80036f2:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <UART_SetConfig+0x2ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003700:	d017      	beq.n	8003732 <UART_SetConfig+0x272>
 8003702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003706:	d817      	bhi.n	8003738 <UART_SetConfig+0x278>
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370c:	d00b      	beq.n	8003726 <UART_SetConfig+0x266>
 800370e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003712:	d811      	bhi.n	8003738 <UART_SetConfig+0x278>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <UART_SetConfig+0x260>
 8003718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371c:	d006      	beq.n	800372c <UART_SetConfig+0x26c>
 800371e:	e00b      	b.n	8003738 <UART_SetConfig+0x278>
 8003720:	2300      	movs	r3, #0
 8003722:	76fb      	strb	r3, [r7, #27]
 8003724:	e00d      	b.n	8003742 <UART_SetConfig+0x282>
 8003726:	2302      	movs	r3, #2
 8003728:	76fb      	strb	r3, [r7, #27]
 800372a:	e00a      	b.n	8003742 <UART_SetConfig+0x282>
 800372c:	2304      	movs	r3, #4
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e007      	b.n	8003742 <UART_SetConfig+0x282>
 8003732:	2308      	movs	r3, #8
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e004      	b.n	8003742 <UART_SetConfig+0x282>
 8003738:	2310      	movs	r3, #16
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e001      	b.n	8003742 <UART_SetConfig+0x282>
 800373e:	2310      	movs	r3, #16
 8003740:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <UART_SetConfig+0x2e4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	f040 8087 	bne.w	800385c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374e:	7efb      	ldrb	r3, [r7, #27]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d837      	bhi.n	80037c4 <UART_SetConfig+0x304>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0x29c>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003781 	.word	0x08003781
 8003760:	080037c5 	.word	0x080037c5
 8003764:	08003789 	.word	0x08003789
 8003768:	080037c5 	.word	0x080037c5
 800376c:	0800378f 	.word	0x0800378f
 8003770:	080037c5 	.word	0x080037c5
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037c5 	.word	0x080037c5
 800377c:	08003797 	.word	0x08003797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7ff f908 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003784:	6178      	str	r0, [r7, #20]
        break;
 8003786:	e022      	b.n	80037ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <UART_SetConfig+0x300>)
 800378a:	617b      	str	r3, [r7, #20]
        break;
 800378c:	e01f      	b.n	80037ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378e:	f7ff f869 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8003792:	6178      	str	r0, [r7, #20]
        break;
 8003794:	e01b      	b.n	80037ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379a:	617b      	str	r3, [r7, #20]
        break;
 800379c:	e017      	b.n	80037ce <UART_SetConfig+0x30e>
 800379e:	bf00      	nop
 80037a0:	efff69f3 	.word	0xefff69f3
 80037a4:	40008000 	.word	0x40008000
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40004400 	.word	0x40004400
 80037b4:	40004800 	.word	0x40004800
 80037b8:	40004c00 	.word	0x40004c00
 80037bc:	40005000 	.word	0x40005000
 80037c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	76bb      	strb	r3, [r7, #26]
        break;
 80037cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80f1 	beq.w	80039b8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d305      	bcc.n	80037f2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d902      	bls.n	80037f8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	76bb      	strb	r3, [r7, #26]
 80037f6:	e0df      	b.n	80039b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	020b      	lsls	r3, r1, #8
 800380a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800380e:	0202      	lsls	r2, r0, #8
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	6849      	ldr	r1, [r1, #4]
 8003814:	0849      	lsrs	r1, r1, #1
 8003816:	4608      	mov	r0, r1
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	1814      	adds	r4, r2, r0
 800381e:	eb43 0501 	adc.w	r5, r3, r1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	461a      	mov	r2, r3
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fd f968 	bl	8000b04 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4613      	mov	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003842:	d308      	bcc.n	8003856 <UART_SetConfig+0x396>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384a:	d204      	bcs.n	8003856 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e0b0      	b.n	80039b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	76bb      	strb	r3, [r7, #26]
 800385a:	e0ad      	b.n	80039b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	d15c      	bne.n	8003920 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003866:	7efb      	ldrb	r3, [r7, #27]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d828      	bhi.n	80038be <UART_SetConfig+0x3fe>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0x3b4>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003899 	.word	0x08003899
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038bf 	.word	0x080038bf
 8003884:	080038af 	.word	0x080038af
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038bf 	.word	0x080038bf
 8003894:	080038b7 	.word	0x080038b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7ff f87c 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 800389c:	6178      	str	r0, [r7, #20]
        break;
 800389e:	e013      	b.n	80038c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a0:	f7ff f88e 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80038a4:	6178      	str	r0, [r7, #20]
        break;
 80038a6:	e00f      	b.n	80038c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <UART_SetConfig+0x510>)
 80038aa:	617b      	str	r3, [r7, #20]
        break;
 80038ac:	e00c      	b.n	80038c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ae:	f7fe ffd9 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80038b2:	6178      	str	r0, [r7, #20]
        break;
 80038b4:	e008      	b.n	80038c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	617b      	str	r3, [r7, #20]
        break;
 80038bc:	e004      	b.n	80038c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	76bb      	strb	r3, [r7, #26]
        break;
 80038c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d074      	beq.n	80039b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	005a      	lsls	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	441a      	add	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d916      	bls.n	800391a <UART_SetConfig+0x45a>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d212      	bcs.n	800391a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f023 030f 	bic.w	r3, r3, #15
 80038fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	b29a      	uxth	r2, r3
 800390a:	89fb      	ldrh	r3, [r7, #14]
 800390c:	4313      	orrs	r3, r2
 800390e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	89fa      	ldrh	r2, [r7, #14]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e04e      	b.n	80039b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	76bb      	strb	r3, [r7, #26]
 800391e:	e04b      	b.n	80039b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003920:	7efb      	ldrb	r3, [r7, #27]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d827      	bhi.n	8003976 <UART_SetConfig+0x4b6>
 8003926:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0x46c>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	08003951 	.word	0x08003951
 8003930:	08003959 	.word	0x08003959
 8003934:	08003961 	.word	0x08003961
 8003938:	08003977 	.word	0x08003977
 800393c:	08003967 	.word	0x08003967
 8003940:	08003977 	.word	0x08003977
 8003944:	08003977 	.word	0x08003977
 8003948:	08003977 	.word	0x08003977
 800394c:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7ff f820 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003954:	6178      	str	r0, [r7, #20]
        break;
 8003956:	e013      	b.n	8003980 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7ff f832 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800395c:	6178      	str	r0, [r7, #20]
        break;
 800395e:	e00f      	b.n	8003980 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <UART_SetConfig+0x510>)
 8003962:	617b      	str	r3, [r7, #20]
        break;
 8003964:	e00c      	b.n	8003980 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe ff7d 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 800396a:	6178      	str	r0, [r7, #20]
        break;
 800396c:	e008      	b.n	8003980 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	617b      	str	r3, [r7, #20]
        break;
 8003974:	e004      	b.n	8003980 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	76bb      	strb	r3, [r7, #26]
        break;
 800397e:	bf00      	nop
    }

    if (pclk != 0U)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	085a      	lsrs	r2, r3, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	441a      	add	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	d908      	bls.n	80039b4 <UART_SetConfig+0x4f4>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d204      	bcs.n	80039b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	e001      	b.n	80039b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bdb0      	pop	{r4, r5, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00f42400 	.word	0x00f42400

080039d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01a      	beq.n	8003aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad2:	d10a      	bne.n	8003aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b28:	f7fd fd02 	bl	8001530 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d10e      	bne.n	8003b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f82d 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e023      	b.n	8003ba2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d10e      	bne.n	8003b86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f817 	bl	8003baa <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00d      	b.n	8003ba2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	e05e      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d05a      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7fd fcb4 	bl	8001530 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d302      	bcc.n	8003bda <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11b      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003be8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e043      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02c      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d124      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c38:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e00f      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d091      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4d0d      	ldr	r5, [pc, #52]	; (8003cdc <__libc_init_array+0x38>)
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003caa:	1b64      	subs	r4, r4, r5
 8003cac:	10a4      	asrs	r4, r4, #2
 8003cae:	2600      	movs	r6, #0
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ce4 <__libc_init_array+0x40>)
 8003cb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ce8 <__libc_init_array+0x44>)
 8003cb8:	f001 f858 	bl	8004d6c <_init>
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08004fb0 	.word	0x08004fb0
 8003ce0:	08004fb0 	.word	0x08004fb0
 8003ce4:	08004fb0 	.word	0x08004fb0
 8003ce8:	08004fb4 	.word	0x08004fb4

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>
 8003cfc:	0000      	movs	r0, r0
	...

08003d00 <sin>:
 8003d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d02:	ec53 2b10 	vmov	r2, r3, d0
 8003d06:	4826      	ldr	r0, [pc, #152]	; (8003da0 <sin+0xa0>)
 8003d08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d0c:	4281      	cmp	r1, r0
 8003d0e:	dc07      	bgt.n	8003d20 <sin+0x20>
 8003d10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003d98 <sin+0x98>
 8003d14:	2000      	movs	r0, #0
 8003d16:	f000 fe5b 	bl	80049d0 <__kernel_sin>
 8003d1a:	ec51 0b10 	vmov	r0, r1, d0
 8003d1e:	e007      	b.n	8003d30 <sin+0x30>
 8003d20:	4820      	ldr	r0, [pc, #128]	; (8003da4 <sin+0xa4>)
 8003d22:	4281      	cmp	r1, r0
 8003d24:	dd09      	ble.n	8003d3a <sin+0x3a>
 8003d26:	ee10 0a10 	vmov	r0, s0
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f7fc fa50 	bl	80001d0 <__aeabi_dsub>
 8003d30:	ec41 0b10 	vmov	d0, r0, r1
 8003d34:	b005      	add	sp, #20
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	4668      	mov	r0, sp
 8003d3c:	f000 f834 	bl	8003da8 <__ieee754_rem_pio2>
 8003d40:	f000 0003 	and.w	r0, r0, #3
 8003d44:	2801      	cmp	r0, #1
 8003d46:	d008      	beq.n	8003d5a <sin+0x5a>
 8003d48:	2802      	cmp	r0, #2
 8003d4a:	d00d      	beq.n	8003d68 <sin+0x68>
 8003d4c:	b9d0      	cbnz	r0, 8003d84 <sin+0x84>
 8003d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d52:	ed9d 0b00 	vldr	d0, [sp]
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7dd      	b.n	8003d16 <sin+0x16>
 8003d5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d5e:	ed9d 0b00 	vldr	d0, [sp]
 8003d62:	f000 fa2d 	bl	80041c0 <__kernel_cos>
 8003d66:	e7d8      	b.n	8003d1a <sin+0x1a>
 8003d68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d6c:	ed9d 0b00 	vldr	d0, [sp]
 8003d70:	2001      	movs	r0, #1
 8003d72:	f000 fe2d 	bl	80049d0 <__kernel_sin>
 8003d76:	ec53 2b10 	vmov	r2, r3, d0
 8003d7a:	ee10 0a10 	vmov	r0, s0
 8003d7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d82:	e7d5      	b.n	8003d30 <sin+0x30>
 8003d84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d88:	ed9d 0b00 	vldr	d0, [sp]
 8003d8c:	f000 fa18 	bl	80041c0 <__kernel_cos>
 8003d90:	e7f1      	b.n	8003d76 <sin+0x76>
 8003d92:	bf00      	nop
 8003d94:	f3af 8000 	nop.w
	...
 8003da0:	3fe921fb 	.word	0x3fe921fb
 8003da4:	7fefffff 	.word	0x7fefffff

08003da8 <__ieee754_rem_pio2>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	ed2d 8b02 	vpush	{d8}
 8003db0:	ec55 4b10 	vmov	r4, r5, d0
 8003db4:	4bca      	ldr	r3, [pc, #808]	; (80040e0 <__ieee754_rem_pio2+0x338>)
 8003db6:	b08b      	sub	sp, #44	; 0x2c
 8003db8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003dbc:	4598      	cmp	r8, r3
 8003dbe:	4682      	mov	sl, r0
 8003dc0:	9502      	str	r5, [sp, #8]
 8003dc2:	dc08      	bgt.n	8003dd6 <__ieee754_rem_pio2+0x2e>
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	ed80 0b00 	vstr	d0, [r0]
 8003dcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003dd0:	f04f 0b00 	mov.w	fp, #0
 8003dd4:	e028      	b.n	8003e28 <__ieee754_rem_pio2+0x80>
 8003dd6:	4bc3      	ldr	r3, [pc, #780]	; (80040e4 <__ieee754_rem_pio2+0x33c>)
 8003dd8:	4598      	cmp	r8, r3
 8003dda:	dc78      	bgt.n	8003ece <__ieee754_rem_pio2+0x126>
 8003ddc:	9b02      	ldr	r3, [sp, #8]
 8003dde:	4ec2      	ldr	r6, [pc, #776]	; (80040e8 <__ieee754_rem_pio2+0x340>)
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	ee10 0a10 	vmov	r0, s0
 8003de6:	a3b0      	add	r3, pc, #704	; (adr r3, 80040a8 <__ieee754_rem_pio2+0x300>)
 8003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dec:	4629      	mov	r1, r5
 8003dee:	dd39      	ble.n	8003e64 <__ieee754_rem_pio2+0xbc>
 8003df0:	f7fc f9ee 	bl	80001d0 <__aeabi_dsub>
 8003df4:	45b0      	cmp	r8, r6
 8003df6:	4604      	mov	r4, r0
 8003df8:	460d      	mov	r5, r1
 8003dfa:	d01b      	beq.n	8003e34 <__ieee754_rem_pio2+0x8c>
 8003dfc:	a3ac      	add	r3, pc, #688	; (adr r3, 80040b0 <__ieee754_rem_pio2+0x308>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc f9e5 	bl	80001d0 <__aeabi_dsub>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f7fc f9dd 	bl	80001d0 <__aeabi_dsub>
 8003e16:	a3a6      	add	r3, pc, #664	; (adr r3, 80040b0 <__ieee754_rem_pio2+0x308>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc f9d8 	bl	80001d0 <__aeabi_dsub>
 8003e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003e24:	f04f 0b01 	mov.w	fp, #1
 8003e28:	4658      	mov	r0, fp
 8003e2a:	b00b      	add	sp, #44	; 0x2c
 8003e2c:	ecbd 8b02 	vpop	{d8}
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	a3a0      	add	r3, pc, #640	; (adr r3, 80040b8 <__ieee754_rem_pio2+0x310>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc f9c9 	bl	80001d0 <__aeabi_dsub>
 8003e3e:	a3a0      	add	r3, pc, #640	; (adr r3, 80040c0 <__ieee754_rem_pio2+0x318>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	4604      	mov	r4, r0
 8003e46:	460d      	mov	r5, r1
 8003e48:	f7fc f9c2 	bl	80001d0 <__aeabi_dsub>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	e9ca 2300 	strd	r2, r3, [sl]
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7fc f9ba 	bl	80001d0 <__aeabi_dsub>
 8003e5c:	a398      	add	r3, pc, #608	; (adr r3, 80040c0 <__ieee754_rem_pio2+0x318>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	e7db      	b.n	8003e1c <__ieee754_rem_pio2+0x74>
 8003e64:	f7fc f9b6 	bl	80001d4 <__adddf3>
 8003e68:	45b0      	cmp	r8, r6
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	460d      	mov	r5, r1
 8003e6e:	d016      	beq.n	8003e9e <__ieee754_rem_pio2+0xf6>
 8003e70:	a38f      	add	r3, pc, #572	; (adr r3, 80040b0 <__ieee754_rem_pio2+0x308>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc f9ad 	bl	80001d4 <__adddf3>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	e9ca 2300 	strd	r2, r3, [sl]
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc f9a3 	bl	80001d0 <__aeabi_dsub>
 8003e8a:	a389      	add	r3, pc, #548	; (adr r3, 80040b0 <__ieee754_rem_pio2+0x308>)
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f7fc f9a0 	bl	80001d4 <__adddf3>
 8003e94:	f04f 3bff 	mov.w	fp, #4294967295
 8003e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003e9c:	e7c4      	b.n	8003e28 <__ieee754_rem_pio2+0x80>
 8003e9e:	a386      	add	r3, pc, #536	; (adr r3, 80040b8 <__ieee754_rem_pio2+0x310>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc f996 	bl	80001d4 <__adddf3>
 8003ea8:	a385      	add	r3, pc, #532	; (adr r3, 80040c0 <__ieee754_rem_pio2+0x318>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	4604      	mov	r4, r0
 8003eb0:	460d      	mov	r5, r1
 8003eb2:	f7fc f98f 	bl	80001d4 <__adddf3>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	e9ca 2300 	strd	r2, r3, [sl]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	f7fc f985 	bl	80001d0 <__aeabi_dsub>
 8003ec6:	a37e      	add	r3, pc, #504	; (adr r3, 80040c0 <__ieee754_rem_pio2+0x318>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	e7e0      	b.n	8003e90 <__ieee754_rem_pio2+0xe8>
 8003ece:	4b87      	ldr	r3, [pc, #540]	; (80040ec <__ieee754_rem_pio2+0x344>)
 8003ed0:	4598      	cmp	r8, r3
 8003ed2:	f300 80d9 	bgt.w	8004088 <__ieee754_rem_pio2+0x2e0>
 8003ed6:	f000 fe39 	bl	8004b4c <fabs>
 8003eda:	ec55 4b10 	vmov	r4, r5, d0
 8003ede:	ee10 0a10 	vmov	r0, s0
 8003ee2:	a379      	add	r3, pc, #484	; (adr r3, 80040c8 <__ieee754_rem_pio2+0x320>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	4629      	mov	r1, r5
 8003eea:	f7fc fb29 	bl	8000540 <__aeabi_dmul>
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <__ieee754_rem_pio2+0x348>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f7fc f96f 	bl	80001d4 <__adddf3>
 8003ef6:	f7fc fdbd 	bl	8000a74 <__aeabi_d2iz>
 8003efa:	4683      	mov	fp, r0
 8003efc:	f7fc fab6 	bl	800046c <__aeabi_i2d>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	ec43 2b18 	vmov	d8, r2, r3
 8003f08:	a367      	add	r3, pc, #412	; (adr r3, 80040a8 <__ieee754_rem_pio2+0x300>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc fb17 	bl	8000540 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4620      	mov	r0, r4
 8003f18:	4629      	mov	r1, r5
 8003f1a:	f7fc f959 	bl	80001d0 <__aeabi_dsub>
 8003f1e:	a364      	add	r3, pc, #400	; (adr r3, 80040b0 <__ieee754_rem_pio2+0x308>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	4606      	mov	r6, r0
 8003f26:	460f      	mov	r7, r1
 8003f28:	ec51 0b18 	vmov	r0, r1, d8
 8003f2c:	f7fc fb08 	bl	8000540 <__aeabi_dmul>
 8003f30:	f1bb 0f1f 	cmp.w	fp, #31
 8003f34:	4604      	mov	r4, r0
 8003f36:	460d      	mov	r5, r1
 8003f38:	dc0d      	bgt.n	8003f56 <__ieee754_rem_pio2+0x1ae>
 8003f3a:	4b6e      	ldr	r3, [pc, #440]	; (80040f4 <__ieee754_rem_pio2+0x34c>)
 8003f3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f44:	4543      	cmp	r3, r8
 8003f46:	d006      	beq.n	8003f56 <__ieee754_rem_pio2+0x1ae>
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fc f93e 	bl	80001d0 <__aeabi_dsub>
 8003f54:	e00f      	b.n	8003f76 <__ieee754_rem_pio2+0x1ce>
 8003f56:	462b      	mov	r3, r5
 8003f58:	4622      	mov	r2, r4
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	f7fc f937 	bl	80001d0 <__aeabi_dsub>
 8003f62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003f70:	f1b8 0f10 	cmp.w	r8, #16
 8003f74:	dc02      	bgt.n	8003f7c <__ieee754_rem_pio2+0x1d4>
 8003f76:	e9ca 0100 	strd	r0, r1, [sl]
 8003f7a:	e039      	b.n	8003ff0 <__ieee754_rem_pio2+0x248>
 8003f7c:	a34e      	add	r3, pc, #312	; (adr r3, 80040b8 <__ieee754_rem_pio2+0x310>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	ec51 0b18 	vmov	r0, r1, d8
 8003f86:	f7fc fadb 	bl	8000540 <__aeabi_dmul>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4630      	mov	r0, r6
 8003f94:	4639      	mov	r1, r7
 8003f96:	f7fc f91b 	bl	80001d0 <__aeabi_dsub>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	f7fc f913 	bl	80001d0 <__aeabi_dsub>
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	f7fc f90f 	bl	80001d0 <__aeabi_dsub>
 8003fb2:	a343      	add	r3, pc, #268	; (adr r3, 80040c0 <__ieee754_rem_pio2+0x318>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	ec51 0b18 	vmov	r0, r1, d8
 8003fc0:	f7fc fabe 	bl	8000540 <__aeabi_dmul>
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	f7fc f8fa 	bl	80001d0 <__aeabi_dsub>
 8003fdc:	9a03      	ldr	r2, [sp, #12]
 8003fde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b31      	cmp	r3, #49	; 0x31
 8003fe6:	dc24      	bgt.n	8004032 <__ieee754_rem_pio2+0x28a>
 8003fe8:	e9ca 0100 	strd	r0, r1, [sl]
 8003fec:	4646      	mov	r6, r8
 8003fee:	464f      	mov	r7, r9
 8003ff0:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	4639      	mov	r1, r7
 8003ffc:	f7fc f8e8 	bl	80001d0 <__aeabi_dsub>
 8004000:	462b      	mov	r3, r5
 8004002:	4622      	mov	r2, r4
 8004004:	f7fc f8e4 	bl	80001d0 <__aeabi_dsub>
 8004008:	9b02      	ldr	r3, [sp, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004010:	f6bf af0a 	bge.w	8003e28 <__ieee754_rem_pio2+0x80>
 8004014:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004018:	f8ca 3004 	str.w	r3, [sl, #4]
 800401c:	f8ca 8000 	str.w	r8, [sl]
 8004020:	f8ca 0008 	str.w	r0, [sl, #8]
 8004024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004028:	f8ca 300c 	str.w	r3, [sl, #12]
 800402c:	f1cb 0b00 	rsb	fp, fp, #0
 8004030:	e6fa      	b.n	8003e28 <__ieee754_rem_pio2+0x80>
 8004032:	a327      	add	r3, pc, #156	; (adr r3, 80040d0 <__ieee754_rem_pio2+0x328>)
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	ec51 0b18 	vmov	r0, r1, d8
 800403c:	f7fc fa80 	bl	8000540 <__aeabi_dmul>
 8004040:	4604      	mov	r4, r0
 8004042:	460d      	mov	r5, r1
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4640      	mov	r0, r8
 800404a:	4649      	mov	r1, r9
 800404c:	f7fc f8c0 	bl	80001d0 <__aeabi_dsub>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
 8004058:	4640      	mov	r0, r8
 800405a:	4649      	mov	r1, r9
 800405c:	f7fc f8b8 	bl	80001d0 <__aeabi_dsub>
 8004060:	4622      	mov	r2, r4
 8004062:	462b      	mov	r3, r5
 8004064:	f7fc f8b4 	bl	80001d0 <__aeabi_dsub>
 8004068:	a31b      	add	r3, pc, #108	; (adr r3, 80040d8 <__ieee754_rem_pio2+0x330>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	ec51 0b18 	vmov	r0, r1, d8
 8004076:	f7fc fa63 	bl	8000540 <__aeabi_dmul>
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	f7fc f8a7 	bl	80001d0 <__aeabi_dsub>
 8004082:	4604      	mov	r4, r0
 8004084:	460d      	mov	r5, r1
 8004086:	e75f      	b.n	8003f48 <__ieee754_rem_pio2+0x1a0>
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <__ieee754_rem_pio2+0x350>)
 800408a:	4598      	cmp	r8, r3
 800408c:	dd36      	ble.n	80040fc <__ieee754_rem_pio2+0x354>
 800408e:	ee10 2a10 	vmov	r2, s0
 8004092:	462b      	mov	r3, r5
 8004094:	4620      	mov	r0, r4
 8004096:	4629      	mov	r1, r5
 8004098:	f7fc f89a 	bl	80001d0 <__aeabi_dsub>
 800409c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80040a0:	e9ca 0100 	strd	r0, r1, [sl]
 80040a4:	e694      	b.n	8003dd0 <__ieee754_rem_pio2+0x28>
 80040a6:	bf00      	nop
 80040a8:	54400000 	.word	0x54400000
 80040ac:	3ff921fb 	.word	0x3ff921fb
 80040b0:	1a626331 	.word	0x1a626331
 80040b4:	3dd0b461 	.word	0x3dd0b461
 80040b8:	1a600000 	.word	0x1a600000
 80040bc:	3dd0b461 	.word	0x3dd0b461
 80040c0:	2e037073 	.word	0x2e037073
 80040c4:	3ba3198a 	.word	0x3ba3198a
 80040c8:	6dc9c883 	.word	0x6dc9c883
 80040cc:	3fe45f30 	.word	0x3fe45f30
 80040d0:	2e000000 	.word	0x2e000000
 80040d4:	3ba3198a 	.word	0x3ba3198a
 80040d8:	252049c1 	.word	0x252049c1
 80040dc:	397b839a 	.word	0x397b839a
 80040e0:	3fe921fb 	.word	0x3fe921fb
 80040e4:	4002d97b 	.word	0x4002d97b
 80040e8:	3ff921fb 	.word	0x3ff921fb
 80040ec:	413921fb 	.word	0x413921fb
 80040f0:	3fe00000 	.word	0x3fe00000
 80040f4:	08004dd0 	.word	0x08004dd0
 80040f8:	7fefffff 	.word	0x7fefffff
 80040fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004100:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004104:	ee10 0a10 	vmov	r0, s0
 8004108:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800410c:	ee10 6a10 	vmov	r6, s0
 8004110:	460f      	mov	r7, r1
 8004112:	f7fc fcaf 	bl	8000a74 <__aeabi_d2iz>
 8004116:	f7fc f9a9 	bl	800046c <__aeabi_i2d>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4630      	mov	r0, r6
 8004120:	4639      	mov	r1, r7
 8004122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004126:	f7fc f853 	bl	80001d0 <__aeabi_dsub>
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <__ieee754_rem_pio2+0x40c>)
 800412c:	2200      	movs	r2, #0
 800412e:	f7fc fa07 	bl	8000540 <__aeabi_dmul>
 8004132:	460f      	mov	r7, r1
 8004134:	4606      	mov	r6, r0
 8004136:	f7fc fc9d 	bl	8000a74 <__aeabi_d2iz>
 800413a:	f7fc f997 	bl	800046c <__aeabi_i2d>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4630      	mov	r0, r6
 8004144:	4639      	mov	r1, r7
 8004146:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800414a:	f7fc f841 	bl	80001d0 <__aeabi_dsub>
 800414e:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <__ieee754_rem_pio2+0x40c>)
 8004150:	2200      	movs	r2, #0
 8004152:	f7fc f9f5 	bl	8000540 <__aeabi_dmul>
 8004156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800415a:	ad04      	add	r5, sp, #16
 800415c:	f04f 0803 	mov.w	r8, #3
 8004160:	46a9      	mov	r9, r5
 8004162:	2600      	movs	r6, #0
 8004164:	2700      	movs	r7, #0
 8004166:	4632      	mov	r2, r6
 8004168:	463b      	mov	r3, r7
 800416a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800416e:	46c3      	mov	fp, r8
 8004170:	3d08      	subs	r5, #8
 8004172:	f108 38ff 	add.w	r8, r8, #4294967295
 8004176:	f7fc fc4b 	bl	8000a10 <__aeabi_dcmpeq>
 800417a:	2800      	cmp	r0, #0
 800417c:	d1f3      	bne.n	8004166 <__ieee754_rem_pio2+0x3be>
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <__ieee754_rem_pio2+0x410>)
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2302      	movs	r3, #2
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4622      	mov	r2, r4
 8004188:	465b      	mov	r3, fp
 800418a:	4651      	mov	r1, sl
 800418c:	4648      	mov	r0, r9
 800418e:	f000 f8df 	bl	8004350 <__kernel_rem_pio2>
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	4683      	mov	fp, r0
 8004198:	f6bf ae46 	bge.w	8003e28 <__ieee754_rem_pio2+0x80>
 800419c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80041a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80041a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80041ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041b0:	e73a      	b.n	8004028 <__ieee754_rem_pio2+0x280>
 80041b2:	bf00      	nop
 80041b4:	41700000 	.word	0x41700000
 80041b8:	08004e50 	.word	0x08004e50
 80041bc:	00000000 	.word	0x00000000

080041c0 <__kernel_cos>:
 80041c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ec57 6b10 	vmov	r6, r7, d0
 80041c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80041cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80041d0:	ed8d 1b00 	vstr	d1, [sp]
 80041d4:	da07      	bge.n	80041e6 <__kernel_cos+0x26>
 80041d6:	ee10 0a10 	vmov	r0, s0
 80041da:	4639      	mov	r1, r7
 80041dc:	f7fc fc4a 	bl	8000a74 <__aeabi_d2iz>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f000 8088 	beq.w	80042f6 <__kernel_cos+0x136>
 80041e6:	4632      	mov	r2, r6
 80041e8:	463b      	mov	r3, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	4639      	mov	r1, r7
 80041ee:	f7fc f9a7 	bl	8000540 <__aeabi_dmul>
 80041f2:	4b51      	ldr	r3, [pc, #324]	; (8004338 <__kernel_cos+0x178>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	460d      	mov	r5, r1
 80041fa:	f7fc f9a1 	bl	8000540 <__aeabi_dmul>
 80041fe:	a340      	add	r3, pc, #256	; (adr r3, 8004300 <__kernel_cos+0x140>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	4682      	mov	sl, r0
 8004206:	468b      	mov	fp, r1
 8004208:	4620      	mov	r0, r4
 800420a:	4629      	mov	r1, r5
 800420c:	f7fc f998 	bl	8000540 <__aeabi_dmul>
 8004210:	a33d      	add	r3, pc, #244	; (adr r3, 8004308 <__kernel_cos+0x148>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fb ffdd 	bl	80001d4 <__adddf3>
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	f7fc f98f 	bl	8000540 <__aeabi_dmul>
 8004222:	a33b      	add	r3, pc, #236	; (adr r3, 8004310 <__kernel_cos+0x150>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fb ffd2 	bl	80001d0 <__aeabi_dsub>
 800422c:	4622      	mov	r2, r4
 800422e:	462b      	mov	r3, r5
 8004230:	f7fc f986 	bl	8000540 <__aeabi_dmul>
 8004234:	a338      	add	r3, pc, #224	; (adr r3, 8004318 <__kernel_cos+0x158>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fb ffcb 	bl	80001d4 <__adddf3>
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	f7fc f97d 	bl	8000540 <__aeabi_dmul>
 8004246:	a336      	add	r3, pc, #216	; (adr r3, 8004320 <__kernel_cos+0x160>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fb ffc0 	bl	80001d0 <__aeabi_dsub>
 8004250:	4622      	mov	r2, r4
 8004252:	462b      	mov	r3, r5
 8004254:	f7fc f974 	bl	8000540 <__aeabi_dmul>
 8004258:	a333      	add	r3, pc, #204	; (adr r3, 8004328 <__kernel_cos+0x168>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fb ffb9 	bl	80001d4 <__adddf3>
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	f7fc f96b 	bl	8000540 <__aeabi_dmul>
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f7fc f967 	bl	8000540 <__aeabi_dmul>
 8004272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004276:	4604      	mov	r4, r0
 8004278:	460d      	mov	r5, r1
 800427a:	4630      	mov	r0, r6
 800427c:	4639      	mov	r1, r7
 800427e:	f7fc f95f 	bl	8000540 <__aeabi_dmul>
 8004282:	460b      	mov	r3, r1
 8004284:	4602      	mov	r2, r0
 8004286:	4629      	mov	r1, r5
 8004288:	4620      	mov	r0, r4
 800428a:	f7fb ffa1 	bl	80001d0 <__aeabi_dsub>
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <__kernel_cos+0x17c>)
 8004290:	4598      	cmp	r8, r3
 8004292:	4606      	mov	r6, r0
 8004294:	460f      	mov	r7, r1
 8004296:	dc10      	bgt.n	80042ba <__kernel_cos+0xfa>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4650      	mov	r0, sl
 800429e:	4659      	mov	r1, fp
 80042a0:	f7fb ff96 	bl	80001d0 <__aeabi_dsub>
 80042a4:	460b      	mov	r3, r1
 80042a6:	4926      	ldr	r1, [pc, #152]	; (8004340 <__kernel_cos+0x180>)
 80042a8:	4602      	mov	r2, r0
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7fb ff90 	bl	80001d0 <__aeabi_dsub>
 80042b0:	ec41 0b10 	vmov	d0, r0, r1
 80042b4:	b003      	add	sp, #12
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <__kernel_cos+0x184>)
 80042bc:	4920      	ldr	r1, [pc, #128]	; (8004340 <__kernel_cos+0x180>)
 80042be:	4598      	cmp	r8, r3
 80042c0:	bfcc      	ite	gt
 80042c2:	4d21      	ldrgt	r5, [pc, #132]	; (8004348 <__kernel_cos+0x188>)
 80042c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80042c8:	2400      	movs	r4, #0
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fb ff7e 	bl	80001d0 <__aeabi_dsub>
 80042d4:	4622      	mov	r2, r4
 80042d6:	4680      	mov	r8, r0
 80042d8:	4689      	mov	r9, r1
 80042da:	462b      	mov	r3, r5
 80042dc:	4650      	mov	r0, sl
 80042de:	4659      	mov	r1, fp
 80042e0:	f7fb ff76 	bl	80001d0 <__aeabi_dsub>
 80042e4:	4632      	mov	r2, r6
 80042e6:	463b      	mov	r3, r7
 80042e8:	f7fb ff72 	bl	80001d0 <__aeabi_dsub>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4640      	mov	r0, r8
 80042f2:	4649      	mov	r1, r9
 80042f4:	e7da      	b.n	80042ac <__kernel_cos+0xec>
 80042f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004330 <__kernel_cos+0x170>
 80042fa:	e7db      	b.n	80042b4 <__kernel_cos+0xf4>
 80042fc:	f3af 8000 	nop.w
 8004300:	be8838d4 	.word	0xbe8838d4
 8004304:	bda8fae9 	.word	0xbda8fae9
 8004308:	bdb4b1c4 	.word	0xbdb4b1c4
 800430c:	3e21ee9e 	.word	0x3e21ee9e
 8004310:	809c52ad 	.word	0x809c52ad
 8004314:	3e927e4f 	.word	0x3e927e4f
 8004318:	19cb1590 	.word	0x19cb1590
 800431c:	3efa01a0 	.word	0x3efa01a0
 8004320:	16c15177 	.word	0x16c15177
 8004324:	3f56c16c 	.word	0x3f56c16c
 8004328:	5555554c 	.word	0x5555554c
 800432c:	3fa55555 	.word	0x3fa55555
 8004330:	00000000 	.word	0x00000000
 8004334:	3ff00000 	.word	0x3ff00000
 8004338:	3fe00000 	.word	0x3fe00000
 800433c:	3fd33332 	.word	0x3fd33332
 8004340:	3ff00000 	.word	0x3ff00000
 8004344:	3fe90000 	.word	0x3fe90000
 8004348:	3fd20000 	.word	0x3fd20000
 800434c:	00000000 	.word	0x00000000

08004350 <__kernel_rem_pio2>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	ed2d 8b02 	vpush	{d8}
 8004358:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800435c:	f112 0f14 	cmn.w	r2, #20
 8004360:	9308      	str	r3, [sp, #32]
 8004362:	9101      	str	r1, [sp, #4]
 8004364:	4bc6      	ldr	r3, [pc, #792]	; (8004680 <__kernel_rem_pio2+0x330>)
 8004366:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004368:	9009      	str	r0, [sp, #36]	; 0x24
 800436a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	9b08      	ldr	r3, [sp, #32]
 8004372:	f103 33ff 	add.w	r3, r3, #4294967295
 8004376:	bfa8      	it	ge
 8004378:	1ed4      	subge	r4, r2, #3
 800437a:	9306      	str	r3, [sp, #24]
 800437c:	bfb2      	itee	lt
 800437e:	2400      	movlt	r4, #0
 8004380:	2318      	movge	r3, #24
 8004382:	fb94 f4f3 	sdivge	r4, r4, r3
 8004386:	f06f 0317 	mvn.w	r3, #23
 800438a:	fb04 3303 	mla	r3, r4, r3, r3
 800438e:	eb03 0a02 	add.w	sl, r3, r2
 8004392:	9b04      	ldr	r3, [sp, #16]
 8004394:	9a06      	ldr	r2, [sp, #24]
 8004396:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004670 <__kernel_rem_pio2+0x320>
 800439a:	eb03 0802 	add.w	r8, r3, r2
 800439e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80043a0:	1aa7      	subs	r7, r4, r2
 80043a2:	ae20      	add	r6, sp, #128	; 0x80
 80043a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80043a8:	2500      	movs	r5, #0
 80043aa:	4545      	cmp	r5, r8
 80043ac:	dd18      	ble.n	80043e0 <__kernel_rem_pio2+0x90>
 80043ae:	9b08      	ldr	r3, [sp, #32]
 80043b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80043b4:	aa20      	add	r2, sp, #128	; 0x80
 80043b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004670 <__kernel_rem_pio2+0x320>
 80043ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80043be:	f1c3 0301 	rsb	r3, r3, #1
 80043c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	9b07      	ldr	r3, [sp, #28]
 80043ca:	9a04      	ldr	r2, [sp, #16]
 80043cc:	4443      	add	r3, r8
 80043ce:	429a      	cmp	r2, r3
 80043d0:	db2f      	blt.n	8004432 <__kernel_rem_pio2+0xe2>
 80043d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80043d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80043da:	462f      	mov	r7, r5
 80043dc:	2600      	movs	r6, #0
 80043de:	e01b      	b.n	8004418 <__kernel_rem_pio2+0xc8>
 80043e0:	42ef      	cmn	r7, r5
 80043e2:	d407      	bmi.n	80043f4 <__kernel_rem_pio2+0xa4>
 80043e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80043e8:	f7fc f840 	bl	800046c <__aeabi_i2d>
 80043ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7da      	b.n	80043aa <__kernel_rem_pio2+0x5a>
 80043f4:	ec51 0b18 	vmov	r0, r1, d8
 80043f8:	e7f8      	b.n	80043ec <__kernel_rem_pio2+0x9c>
 80043fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004402:	f7fc f89d 	bl	8000540 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800440e:	f7fb fee1 	bl	80001d4 <__adddf3>
 8004412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004416:	3601      	adds	r6, #1
 8004418:	9b06      	ldr	r3, [sp, #24]
 800441a:	429e      	cmp	r6, r3
 800441c:	f1a7 0708 	sub.w	r7, r7, #8
 8004420:	ddeb      	ble.n	80043fa <__kernel_rem_pio2+0xaa>
 8004422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004426:	3508      	adds	r5, #8
 8004428:	ecab 7b02 	vstmia	fp!, {d7}
 800442c:	f108 0801 	add.w	r8, r8, #1
 8004430:	e7ca      	b.n	80043c8 <__kernel_rem_pio2+0x78>
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	aa0c      	add	r2, sp, #48	; 0x30
 8004436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800443a:	930b      	str	r3, [sp, #44]	; 0x2c
 800443c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800443e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004442:	9c04      	ldr	r4, [sp, #16]
 8004444:	930a      	str	r3, [sp, #40]	; 0x28
 8004446:	ab98      	add	r3, sp, #608	; 0x260
 8004448:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800444c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004450:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004454:	f8cd b008 	str.w	fp, [sp, #8]
 8004458:	4625      	mov	r5, r4
 800445a:	2d00      	cmp	r5, #0
 800445c:	dc78      	bgt.n	8004550 <__kernel_rem_pio2+0x200>
 800445e:	ec47 6b10 	vmov	d0, r6, r7
 8004462:	4650      	mov	r0, sl
 8004464:	f000 fbfc 	bl	8004c60 <scalbn>
 8004468:	ec57 6b10 	vmov	r6, r7, d0
 800446c:	2200      	movs	r2, #0
 800446e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004472:	ee10 0a10 	vmov	r0, s0
 8004476:	4639      	mov	r1, r7
 8004478:	f7fc f862 	bl	8000540 <__aeabi_dmul>
 800447c:	ec41 0b10 	vmov	d0, r0, r1
 8004480:	f000 fb6e 	bl	8004b60 <floor>
 8004484:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <__kernel_rem_pio2+0x334>)
 8004486:	ec51 0b10 	vmov	r0, r1, d0
 800448a:	2200      	movs	r2, #0
 800448c:	f7fc f858 	bl	8000540 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fb fe9a 	bl	80001d0 <__aeabi_dsub>
 800449c:	460f      	mov	r7, r1
 800449e:	4606      	mov	r6, r0
 80044a0:	f7fc fae8 	bl	8000a74 <__aeabi_d2iz>
 80044a4:	9007      	str	r0, [sp, #28]
 80044a6:	f7fb ffe1 	bl	800046c <__aeabi_i2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fb fe8d 	bl	80001d0 <__aeabi_dsub>
 80044b6:	f1ba 0f00 	cmp.w	sl, #0
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	dd70      	ble.n	80045a2 <__kernel_rem_pio2+0x252>
 80044c0:	1e62      	subs	r2, r4, #1
 80044c2:	ab0c      	add	r3, sp, #48	; 0x30
 80044c4:	9d07      	ldr	r5, [sp, #28]
 80044c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80044ca:	f1ca 0118 	rsb	r1, sl, #24
 80044ce:	fa40 f301 	asr.w	r3, r0, r1
 80044d2:	441d      	add	r5, r3
 80044d4:	408b      	lsls	r3, r1
 80044d6:	1ac0      	subs	r0, r0, r3
 80044d8:	ab0c      	add	r3, sp, #48	; 0x30
 80044da:	9507      	str	r5, [sp, #28]
 80044dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80044e0:	f1ca 0317 	rsb	r3, sl, #23
 80044e4:	fa40 f303 	asr.w	r3, r0, r3
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	9b02      	ldr	r3, [sp, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd66      	ble.n	80045be <__kernel_rem_pio2+0x26e>
 80044f0:	9b07      	ldr	r3, [sp, #28]
 80044f2:	2200      	movs	r2, #0
 80044f4:	3301      	adds	r3, #1
 80044f6:	9307      	str	r3, [sp, #28]
 80044f8:	4615      	mov	r5, r2
 80044fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80044fe:	4294      	cmp	r4, r2
 8004500:	f300 8099 	bgt.w	8004636 <__kernel_rem_pio2+0x2e6>
 8004504:	f1ba 0f00 	cmp.w	sl, #0
 8004508:	dd07      	ble.n	800451a <__kernel_rem_pio2+0x1ca>
 800450a:	f1ba 0f01 	cmp.w	sl, #1
 800450e:	f000 80a5 	beq.w	800465c <__kernel_rem_pio2+0x30c>
 8004512:	f1ba 0f02 	cmp.w	sl, #2
 8004516:	f000 80c1 	beq.w	800469c <__kernel_rem_pio2+0x34c>
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d14e      	bne.n	80045be <__kernel_rem_pio2+0x26e>
 8004520:	4632      	mov	r2, r6
 8004522:	463b      	mov	r3, r7
 8004524:	4958      	ldr	r1, [pc, #352]	; (8004688 <__kernel_rem_pio2+0x338>)
 8004526:	2000      	movs	r0, #0
 8004528:	f7fb fe52 	bl	80001d0 <__aeabi_dsub>
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	2d00      	cmp	r5, #0
 8004532:	d044      	beq.n	80045be <__kernel_rem_pio2+0x26e>
 8004534:	4650      	mov	r0, sl
 8004536:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004678 <__kernel_rem_pio2+0x328>
 800453a:	f000 fb91 	bl	8004c60 <scalbn>
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	ec53 2b10 	vmov	r2, r3, d0
 8004546:	f7fb fe43 	bl	80001d0 <__aeabi_dsub>
 800454a:	4606      	mov	r6, r0
 800454c:	460f      	mov	r7, r1
 800454e:	e036      	b.n	80045be <__kernel_rem_pio2+0x26e>
 8004550:	4b4e      	ldr	r3, [pc, #312]	; (800468c <__kernel_rem_pio2+0x33c>)
 8004552:	2200      	movs	r2, #0
 8004554:	4630      	mov	r0, r6
 8004556:	4639      	mov	r1, r7
 8004558:	f7fb fff2 	bl	8000540 <__aeabi_dmul>
 800455c:	f7fc fa8a 	bl	8000a74 <__aeabi_d2iz>
 8004560:	f7fb ff84 	bl	800046c <__aeabi_i2d>
 8004564:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <__kernel_rem_pio2+0x340>)
 8004566:	2200      	movs	r2, #0
 8004568:	4680      	mov	r8, r0
 800456a:	4689      	mov	r9, r1
 800456c:	f7fb ffe8 	bl	8000540 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4630      	mov	r0, r6
 8004576:	4639      	mov	r1, r7
 8004578:	f7fb fe2a 	bl	80001d0 <__aeabi_dsub>
 800457c:	f7fc fa7a 	bl	8000a74 <__aeabi_d2iz>
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	f843 0b04 	str.w	r0, [r3], #4
 8004586:	3d01      	subs	r5, #1
 8004588:	9302      	str	r3, [sp, #8]
 800458a:	ab70      	add	r3, sp, #448	; 0x1c0
 800458c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	4640      	mov	r0, r8
 8004596:	4649      	mov	r1, r9
 8004598:	f7fb fe1c 	bl	80001d4 <__adddf3>
 800459c:	4606      	mov	r6, r0
 800459e:	460f      	mov	r7, r1
 80045a0:	e75b      	b.n	800445a <__kernel_rem_pio2+0x10a>
 80045a2:	d105      	bne.n	80045b0 <__kernel_rem_pio2+0x260>
 80045a4:	1e63      	subs	r3, r4, #1
 80045a6:	aa0c      	add	r2, sp, #48	; 0x30
 80045a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045ac:	15c3      	asrs	r3, r0, #23
 80045ae:	e79b      	b.n	80044e8 <__kernel_rem_pio2+0x198>
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <__kernel_rem_pio2+0x344>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	f7fc fa4a 	bl	8000a4c <__aeabi_dcmpge>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d139      	bne.n	8004630 <__kernel_rem_pio2+0x2e0>
 80045bc:	9002      	str	r0, [sp, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fc fa23 	bl	8000a10 <__aeabi_dcmpeq>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	f000 80b4 	beq.w	8004738 <__kernel_rem_pio2+0x3e8>
 80045d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80045d4:	465b      	mov	r3, fp
 80045d6:	2200      	movs	r2, #0
 80045d8:	9904      	ldr	r1, [sp, #16]
 80045da:	428b      	cmp	r3, r1
 80045dc:	da65      	bge.n	80046aa <__kernel_rem_pio2+0x35a>
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d07b      	beq.n	80046da <__kernel_rem_pio2+0x38a>
 80045e2:	ab0c      	add	r3, sp, #48	; 0x30
 80045e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80045e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a0 	beq.w	8004732 <__kernel_rem_pio2+0x3e2>
 80045f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004678 <__kernel_rem_pio2+0x328>
 80045f6:	4650      	mov	r0, sl
 80045f8:	f000 fb32 	bl	8004c60 <scalbn>
 80045fc:	4f23      	ldr	r7, [pc, #140]	; (800468c <__kernel_rem_pio2+0x33c>)
 80045fe:	ec55 4b10 	vmov	r4, r5, d0
 8004602:	46d8      	mov	r8, fp
 8004604:	2600      	movs	r6, #0
 8004606:	f1b8 0f00 	cmp.w	r8, #0
 800460a:	f280 80cf 	bge.w	80047ac <__kernel_rem_pio2+0x45c>
 800460e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004670 <__kernel_rem_pio2+0x320>
 8004612:	465f      	mov	r7, fp
 8004614:	f04f 0800 	mov.w	r8, #0
 8004618:	2f00      	cmp	r7, #0
 800461a:	f2c0 80fd 	blt.w	8004818 <__kernel_rem_pio2+0x4c8>
 800461e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004620:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004698 <__kernel_rem_pio2+0x348>
 8004624:	ec55 4b18 	vmov	r4, r5, d8
 8004628:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800462c:	2600      	movs	r6, #0
 800462e:	e0e5      	b.n	80047fc <__kernel_rem_pio2+0x4ac>
 8004630:	2302      	movs	r3, #2
 8004632:	9302      	str	r3, [sp, #8]
 8004634:	e75c      	b.n	80044f0 <__kernel_rem_pio2+0x1a0>
 8004636:	f8db 3000 	ldr.w	r3, [fp]
 800463a:	b955      	cbnz	r5, 8004652 <__kernel_rem_pio2+0x302>
 800463c:	b123      	cbz	r3, 8004648 <__kernel_rem_pio2+0x2f8>
 800463e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004642:	f8cb 3000 	str.w	r3, [fp]
 8004646:	2301      	movs	r3, #1
 8004648:	3201      	adds	r2, #1
 800464a:	f10b 0b04 	add.w	fp, fp, #4
 800464e:	461d      	mov	r5, r3
 8004650:	e755      	b.n	80044fe <__kernel_rem_pio2+0x1ae>
 8004652:	1acb      	subs	r3, r1, r3
 8004654:	f8cb 3000 	str.w	r3, [fp]
 8004658:	462b      	mov	r3, r5
 800465a:	e7f5      	b.n	8004648 <__kernel_rem_pio2+0x2f8>
 800465c:	1e62      	subs	r2, r4, #1
 800465e:	ab0c      	add	r3, sp, #48	; 0x30
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004668:	a90c      	add	r1, sp, #48	; 0x30
 800466a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800466e:	e754      	b.n	800451a <__kernel_rem_pio2+0x1ca>
	...
 800467c:	3ff00000 	.word	0x3ff00000
 8004680:	08004f98 	.word	0x08004f98
 8004684:	40200000 	.word	0x40200000
 8004688:	3ff00000 	.word	0x3ff00000
 800468c:	3e700000 	.word	0x3e700000
 8004690:	41700000 	.word	0x41700000
 8004694:	3fe00000 	.word	0x3fe00000
 8004698:	08004f58 	.word	0x08004f58
 800469c:	1e62      	subs	r2, r4, #1
 800469e:	ab0c      	add	r3, sp, #48	; 0x30
 80046a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80046a8:	e7de      	b.n	8004668 <__kernel_rem_pio2+0x318>
 80046aa:	a90c      	add	r1, sp, #48	; 0x30
 80046ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	e790      	b.n	80045d8 <__kernel_rem_pio2+0x288>
 80046b6:	3301      	adds	r3, #1
 80046b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80046bc:	2900      	cmp	r1, #0
 80046be:	d0fa      	beq.n	80046b6 <__kernel_rem_pio2+0x366>
 80046c0:	9a08      	ldr	r2, [sp, #32]
 80046c2:	18e3      	adds	r3, r4, r3
 80046c4:	18a6      	adds	r6, r4, r2
 80046c6:	aa20      	add	r2, sp, #128	; 0x80
 80046c8:	1c65      	adds	r5, r4, #1
 80046ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	9b02      	ldr	r3, [sp, #8]
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	da04      	bge.n	80046e0 <__kernel_rem_pio2+0x390>
 80046d6:	461c      	mov	r4, r3
 80046d8:	e6b5      	b.n	8004446 <__kernel_rem_pio2+0xf6>
 80046da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046dc:	2301      	movs	r3, #1
 80046de:	e7eb      	b.n	80046b8 <__kernel_rem_pio2+0x368>
 80046e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046e6:	f7fb fec1 	bl	800046c <__aeabi_i2d>
 80046ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80046ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f0:	46b3      	mov	fp, r6
 80046f2:	461c      	mov	r4, r3
 80046f4:	2700      	movs	r7, #0
 80046f6:	f04f 0800 	mov.w	r8, #0
 80046fa:	f04f 0900 	mov.w	r9, #0
 80046fe:	9b06      	ldr	r3, [sp, #24]
 8004700:	429f      	cmp	r7, r3
 8004702:	dd06      	ble.n	8004712 <__kernel_rem_pio2+0x3c2>
 8004704:	ab70      	add	r3, sp, #448	; 0x1c0
 8004706:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800470a:	e9c3 8900 	strd	r8, r9, [r3]
 800470e:	3501      	adds	r5, #1
 8004710:	e7de      	b.n	80046d0 <__kernel_rem_pio2+0x380>
 8004712:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004716:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800471a:	f7fb ff11 	bl	8000540 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4640      	mov	r0, r8
 8004724:	4649      	mov	r1, r9
 8004726:	f7fb fd55 	bl	80001d4 <__adddf3>
 800472a:	3701      	adds	r7, #1
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	e7e5      	b.n	80046fe <__kernel_rem_pio2+0x3ae>
 8004732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004736:	e754      	b.n	80045e2 <__kernel_rem_pio2+0x292>
 8004738:	ec47 6b10 	vmov	d0, r6, r7
 800473c:	f1ca 0000 	rsb	r0, sl, #0
 8004740:	f000 fa8e 	bl	8004c60 <scalbn>
 8004744:	ec57 6b10 	vmov	r6, r7, d0
 8004748:	4b9f      	ldr	r3, [pc, #636]	; (80049c8 <__kernel_rem_pio2+0x678>)
 800474a:	ee10 0a10 	vmov	r0, s0
 800474e:	2200      	movs	r2, #0
 8004750:	4639      	mov	r1, r7
 8004752:	f7fc f97b 	bl	8000a4c <__aeabi_dcmpge>
 8004756:	b300      	cbz	r0, 800479a <__kernel_rem_pio2+0x44a>
 8004758:	4b9c      	ldr	r3, [pc, #624]	; (80049cc <__kernel_rem_pio2+0x67c>)
 800475a:	2200      	movs	r2, #0
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	f7fb feee 	bl	8000540 <__aeabi_dmul>
 8004764:	f7fc f986 	bl	8000a74 <__aeabi_d2iz>
 8004768:	4605      	mov	r5, r0
 800476a:	f7fb fe7f 	bl	800046c <__aeabi_i2d>
 800476e:	4b96      	ldr	r3, [pc, #600]	; (80049c8 <__kernel_rem_pio2+0x678>)
 8004770:	2200      	movs	r2, #0
 8004772:	f7fb fee5 	bl	8000540 <__aeabi_dmul>
 8004776:	460b      	mov	r3, r1
 8004778:	4602      	mov	r2, r0
 800477a:	4639      	mov	r1, r7
 800477c:	4630      	mov	r0, r6
 800477e:	f7fb fd27 	bl	80001d0 <__aeabi_dsub>
 8004782:	f7fc f977 	bl	8000a74 <__aeabi_d2iz>
 8004786:	f104 0b01 	add.w	fp, r4, #1
 800478a:	ab0c      	add	r3, sp, #48	; 0x30
 800478c:	f10a 0a18 	add.w	sl, sl, #24
 8004790:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004794:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004798:	e72b      	b.n	80045f2 <__kernel_rem_pio2+0x2a2>
 800479a:	4630      	mov	r0, r6
 800479c:	4639      	mov	r1, r7
 800479e:	f7fc f969 	bl	8000a74 <__aeabi_d2iz>
 80047a2:	ab0c      	add	r3, sp, #48	; 0x30
 80047a4:	46a3      	mov	fp, r4
 80047a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80047aa:	e722      	b.n	80045f2 <__kernel_rem_pio2+0x2a2>
 80047ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80047ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80047b2:	ab0c      	add	r3, sp, #48	; 0x30
 80047b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80047b8:	f7fb fe58 	bl	800046c <__aeabi_i2d>
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	f7fb febe 	bl	8000540 <__aeabi_dmul>
 80047c4:	4632      	mov	r2, r6
 80047c6:	e9c9 0100 	strd	r0, r1, [r9]
 80047ca:	463b      	mov	r3, r7
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	f7fb feb6 	bl	8000540 <__aeabi_dmul>
 80047d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	e713      	b.n	8004606 <__kernel_rem_pio2+0x2b6>
 80047de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80047e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80047e6:	f7fb feab 	bl	8000540 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fb fcef 	bl	80001d4 <__adddf3>
 80047f6:	3601      	adds	r6, #1
 80047f8:	4604      	mov	r4, r0
 80047fa:	460d      	mov	r5, r1
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	429e      	cmp	r6, r3
 8004800:	dc01      	bgt.n	8004806 <__kernel_rem_pio2+0x4b6>
 8004802:	45b0      	cmp	r8, r6
 8004804:	daeb      	bge.n	80047de <__kernel_rem_pio2+0x48e>
 8004806:	ab48      	add	r3, sp, #288	; 0x120
 8004808:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800480c:	e9c3 4500 	strd	r4, r5, [r3]
 8004810:	3f01      	subs	r7, #1
 8004812:	f108 0801 	add.w	r8, r8, #1
 8004816:	e6ff      	b.n	8004618 <__kernel_rem_pio2+0x2c8>
 8004818:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800481a:	2b02      	cmp	r3, #2
 800481c:	dc0b      	bgt.n	8004836 <__kernel_rem_pio2+0x4e6>
 800481e:	2b00      	cmp	r3, #0
 8004820:	dc6e      	bgt.n	8004900 <__kernel_rem_pio2+0x5b0>
 8004822:	d045      	beq.n	80048b0 <__kernel_rem_pio2+0x560>
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	f003 0007 	and.w	r0, r3, #7
 800482a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800482e:	ecbd 8b02 	vpop	{d8}
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004838:	2b03      	cmp	r3, #3
 800483a:	d1f3      	bne.n	8004824 <__kernel_rem_pio2+0x4d4>
 800483c:	ab48      	add	r3, sp, #288	; 0x120
 800483e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8004842:	46d0      	mov	r8, sl
 8004844:	46d9      	mov	r9, fp
 8004846:	f1b9 0f00 	cmp.w	r9, #0
 800484a:	f1a8 0808 	sub.w	r8, r8, #8
 800484e:	dc64      	bgt.n	800491a <__kernel_rem_pio2+0x5ca>
 8004850:	465c      	mov	r4, fp
 8004852:	2c01      	cmp	r4, #1
 8004854:	f1aa 0a08 	sub.w	sl, sl, #8
 8004858:	dc7e      	bgt.n	8004958 <__kernel_rem_pio2+0x608>
 800485a:	2000      	movs	r0, #0
 800485c:	2100      	movs	r1, #0
 800485e:	f1bb 0f01 	cmp.w	fp, #1
 8004862:	f300 8097 	bgt.w	8004994 <__kernel_rem_pio2+0x644>
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800486c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 8099 	bne.w	80049a8 <__kernel_rem_pio2+0x658>
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	e9c3 5600 	strd	r5, r6, [r3]
 800487c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004880:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004884:	e7ce      	b.n	8004824 <__kernel_rem_pio2+0x4d4>
 8004886:	ab48      	add	r3, sp, #288	; 0x120
 8004888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb fca0 	bl	80001d4 <__adddf3>
 8004894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004898:	f1bb 0f00 	cmp.w	fp, #0
 800489c:	daf3      	bge.n	8004886 <__kernel_rem_pio2+0x536>
 800489e:	9b02      	ldr	r3, [sp, #8]
 80048a0:	b113      	cbz	r3, 80048a8 <__kernel_rem_pio2+0x558>
 80048a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048a6:	4619      	mov	r1, r3
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	e9c3 0100 	strd	r0, r1, [r3]
 80048ae:	e7b9      	b.n	8004824 <__kernel_rem_pio2+0x4d4>
 80048b0:	2000      	movs	r0, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	e7f0      	b.n	8004898 <__kernel_rem_pio2+0x548>
 80048b6:	ab48      	add	r3, sp, #288	; 0x120
 80048b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fc88 	bl	80001d4 <__adddf3>
 80048c4:	3c01      	subs	r4, #1
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	daf5      	bge.n	80048b6 <__kernel_rem_pio2+0x566>
 80048ca:	9b02      	ldr	r3, [sp, #8]
 80048cc:	b1e3      	cbz	r3, 8004908 <__kernel_rem_pio2+0x5b8>
 80048ce:	4602      	mov	r2, r0
 80048d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048d4:	9c01      	ldr	r4, [sp, #4]
 80048d6:	e9c4 2300 	strd	r2, r3, [r4]
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80048e2:	f7fb fc75 	bl	80001d0 <__aeabi_dsub>
 80048e6:	ad4a      	add	r5, sp, #296	; 0x128
 80048e8:	2401      	movs	r4, #1
 80048ea:	45a3      	cmp	fp, r4
 80048ec:	da0f      	bge.n	800490e <__kernel_rem_pio2+0x5be>
 80048ee:	9b02      	ldr	r3, [sp, #8]
 80048f0:	b113      	cbz	r3, 80048f8 <__kernel_rem_pio2+0x5a8>
 80048f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048f6:	4619      	mov	r1, r3
 80048f8:	9b01      	ldr	r3, [sp, #4]
 80048fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80048fe:	e791      	b.n	8004824 <__kernel_rem_pio2+0x4d4>
 8004900:	465c      	mov	r4, fp
 8004902:	2000      	movs	r0, #0
 8004904:	2100      	movs	r1, #0
 8004906:	e7de      	b.n	80048c6 <__kernel_rem_pio2+0x576>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	e7e2      	b.n	80048d4 <__kernel_rem_pio2+0x584>
 800490e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004912:	f7fb fc5f 	bl	80001d4 <__adddf3>
 8004916:	3401      	adds	r4, #1
 8004918:	e7e7      	b.n	80048ea <__kernel_rem_pio2+0x59a>
 800491a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800491e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8004922:	4620      	mov	r0, r4
 8004924:	4632      	mov	r2, r6
 8004926:	463b      	mov	r3, r7
 8004928:	4629      	mov	r1, r5
 800492a:	f7fb fc53 	bl	80001d4 <__adddf3>
 800492e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fb fc49 	bl	80001d0 <__aeabi_dsub>
 800493e:	4632      	mov	r2, r6
 8004940:	463b      	mov	r3, r7
 8004942:	f7fb fc47 	bl	80001d4 <__adddf3>
 8004946:	ed9d 7b04 	vldr	d7, [sp, #16]
 800494a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800494e:	ed88 7b00 	vstr	d7, [r8]
 8004952:	f109 39ff 	add.w	r9, r9, #4294967295
 8004956:	e776      	b.n	8004846 <__kernel_rem_pio2+0x4f6>
 8004958:	e9da 8900 	ldrd	r8, r9, [sl]
 800495c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004960:	4640      	mov	r0, r8
 8004962:	4632      	mov	r2, r6
 8004964:	463b      	mov	r3, r7
 8004966:	4649      	mov	r1, r9
 8004968:	f7fb fc34 	bl	80001d4 <__adddf3>
 800496c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4640      	mov	r0, r8
 8004976:	4649      	mov	r1, r9
 8004978:	f7fb fc2a 	bl	80001d0 <__aeabi_dsub>
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	f7fb fc28 	bl	80001d4 <__adddf3>
 8004984:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004988:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800498c:	ed8a 7b00 	vstr	d7, [sl]
 8004990:	3c01      	subs	r4, #1
 8004992:	e75e      	b.n	8004852 <__kernel_rem_pio2+0x502>
 8004994:	ab48      	add	r3, sp, #288	; 0x120
 8004996:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb fc19 	bl	80001d4 <__adddf3>
 80049a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049a6:	e75a      	b.n	800485e <__kernel_rem_pio2+0x50e>
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	601d      	str	r5, [r3, #0]
 80049ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80049b2:	605c      	str	r4, [r3, #4]
 80049b4:	609f      	str	r7, [r3, #8]
 80049b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80049ba:	60d3      	str	r3, [r2, #12]
 80049bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049c0:	6110      	str	r0, [r2, #16]
 80049c2:	6153      	str	r3, [r2, #20]
 80049c4:	e72e      	b.n	8004824 <__kernel_rem_pio2+0x4d4>
 80049c6:	bf00      	nop
 80049c8:	41700000 	.word	0x41700000
 80049cc:	3e700000 	.word	0x3e700000

080049d0 <__kernel_sin>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	ed2d 8b04 	vpush	{d8-d9}
 80049d8:	eeb0 8a41 	vmov.f32	s16, s2
 80049dc:	eef0 8a61 	vmov.f32	s17, s3
 80049e0:	ec55 4b10 	vmov	r4, r5, d0
 80049e4:	b083      	sub	sp, #12
 80049e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80049ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80049ee:	9001      	str	r0, [sp, #4]
 80049f0:	da06      	bge.n	8004a00 <__kernel_sin+0x30>
 80049f2:	ee10 0a10 	vmov	r0, s0
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7fc f83c 	bl	8000a74 <__aeabi_d2iz>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d051      	beq.n	8004aa4 <__kernel_sin+0xd4>
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fd9a 	bl	8000540 <__aeabi_dmul>
 8004a0c:	4682      	mov	sl, r0
 8004a0e:	468b      	mov	fp, r1
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fd92 	bl	8000540 <__aeabi_dmul>
 8004a1c:	a341      	add	r3, pc, #260	; (adr r3, 8004b24 <__kernel_sin+0x154>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	4680      	mov	r8, r0
 8004a24:	4689      	mov	r9, r1
 8004a26:	4650      	mov	r0, sl
 8004a28:	4659      	mov	r1, fp
 8004a2a:	f7fb fd89 	bl	8000540 <__aeabi_dmul>
 8004a2e:	a33f      	add	r3, pc, #252	; (adr r3, 8004b2c <__kernel_sin+0x15c>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fbcc 	bl	80001d0 <__aeabi_dsub>
 8004a38:	4652      	mov	r2, sl
 8004a3a:	465b      	mov	r3, fp
 8004a3c:	f7fb fd80 	bl	8000540 <__aeabi_dmul>
 8004a40:	a33c      	add	r3, pc, #240	; (adr r3, 8004b34 <__kernel_sin+0x164>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fbc5 	bl	80001d4 <__adddf3>
 8004a4a:	4652      	mov	r2, sl
 8004a4c:	465b      	mov	r3, fp
 8004a4e:	f7fb fd77 	bl	8000540 <__aeabi_dmul>
 8004a52:	a33a      	add	r3, pc, #232	; (adr r3, 8004b3c <__kernel_sin+0x16c>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fbba 	bl	80001d0 <__aeabi_dsub>
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	465b      	mov	r3, fp
 8004a60:	f7fb fd6e 	bl	8000540 <__aeabi_dmul>
 8004a64:	a337      	add	r3, pc, #220	; (adr r3, 8004b44 <__kernel_sin+0x174>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fbb3 	bl	80001d4 <__adddf3>
 8004a6e:	9b01      	ldr	r3, [sp, #4]
 8004a70:	4606      	mov	r6, r0
 8004a72:	460f      	mov	r7, r1
 8004a74:	b9eb      	cbnz	r3, 8004ab2 <__kernel_sin+0xe2>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	f7fb fd5f 	bl	8000540 <__aeabi_dmul>
 8004a82:	a325      	add	r3, pc, #148	; (adr r3, 8004b18 <__kernel_sin+0x148>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f7fb fba2 	bl	80001d0 <__aeabi_dsub>
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	f7fb fd56 	bl	8000540 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fb9a 	bl	80001d4 <__adddf3>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	ec45 4b10 	vmov	d0, r4, r5
 8004aa8:	b003      	add	sp, #12
 8004aaa:	ecbd 8b04 	vpop	{d8-d9}
 8004aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <__kernel_sin+0x150>)
 8004ab4:	ec51 0b18 	vmov	r0, r1, d8
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f7fb fd41 	bl	8000540 <__aeabi_dmul>
 8004abe:	4632      	mov	r2, r6
 8004ac0:	ec41 0b19 	vmov	d9, r0, r1
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	f7fb fd39 	bl	8000540 <__aeabi_dmul>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	ec51 0b19 	vmov	r0, r1, d9
 8004ad6:	f7fb fb7b 	bl	80001d0 <__aeabi_dsub>
 8004ada:	4652      	mov	r2, sl
 8004adc:	465b      	mov	r3, fp
 8004ade:	f7fb fd2f 	bl	8000540 <__aeabi_dmul>
 8004ae2:	ec53 2b18 	vmov	r2, r3, d8
 8004ae6:	f7fb fb73 	bl	80001d0 <__aeabi_dsub>
 8004aea:	a30b      	add	r3, pc, #44	; (adr r3, 8004b18 <__kernel_sin+0x148>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	4640      	mov	r0, r8
 8004af6:	4649      	mov	r1, r9
 8004af8:	f7fb fd22 	bl	8000540 <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fb66 	bl	80001d4 <__adddf3>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb fb5e 	bl	80001d0 <__aeabi_dsub>
 8004b14:	e7c4      	b.n	8004aa0 <__kernel_sin+0xd0>
 8004b16:	bf00      	nop
 8004b18:	55555549 	.word	0x55555549
 8004b1c:	3fc55555 	.word	0x3fc55555
 8004b20:	3fe00000 	.word	0x3fe00000
 8004b24:	5acfd57c 	.word	0x5acfd57c
 8004b28:	3de5d93a 	.word	0x3de5d93a
 8004b2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b30:	3e5ae5e6 	.word	0x3e5ae5e6
 8004b34:	57b1fe7d 	.word	0x57b1fe7d
 8004b38:	3ec71de3 	.word	0x3ec71de3
 8004b3c:	19c161d5 	.word	0x19c161d5
 8004b40:	3f2a01a0 	.word	0x3f2a01a0
 8004b44:	1110f8a6 	.word	0x1110f8a6
 8004b48:	3f811111 	.word	0x3f811111

08004b4c <fabs>:
 8004b4c:	ec51 0b10 	vmov	r0, r1, d0
 8004b50:	ee10 2a10 	vmov	r2, s0
 8004b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b58:	ec43 2b10 	vmov	d0, r2, r3
 8004b5c:	4770      	bx	lr
	...

08004b60 <floor>:
 8004b60:	ec51 0b10 	vmov	r0, r1, d0
 8004b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004b6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004b70:	2e13      	cmp	r6, #19
 8004b72:	ee10 5a10 	vmov	r5, s0
 8004b76:	ee10 8a10 	vmov	r8, s0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	dc32      	bgt.n	8004be4 <floor+0x84>
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	da14      	bge.n	8004bac <floor+0x4c>
 8004b82:	a333      	add	r3, pc, #204	; (adr r3, 8004c50 <floor+0xf0>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fb24 	bl	80001d4 <__adddf3>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f7fb ff66 	bl	8000a60 <__aeabi_dcmpgt>
 8004b94:	b138      	cbz	r0, 8004ba6 <floor+0x46>
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	da57      	bge.n	8004c4a <floor+0xea>
 8004b9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b9e:	431d      	orrs	r5, r3
 8004ba0:	d001      	beq.n	8004ba6 <floor+0x46>
 8004ba2:	4c2d      	ldr	r4, [pc, #180]	; (8004c58 <floor+0xf8>)
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	e025      	b.n	8004bf8 <floor+0x98>
 8004bac:	4f2b      	ldr	r7, [pc, #172]	; (8004c5c <floor+0xfc>)
 8004bae:	4137      	asrs	r7, r6
 8004bb0:	ea01 0307 	and.w	r3, r1, r7
 8004bb4:	4303      	orrs	r3, r0
 8004bb6:	d01f      	beq.n	8004bf8 <floor+0x98>
 8004bb8:	a325      	add	r3, pc, #148	; (adr r3, 8004c50 <floor+0xf0>)
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f7fb fb09 	bl	80001d4 <__adddf3>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f7fb ff4b 	bl	8000a60 <__aeabi_dcmpgt>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0eb      	beq.n	8004ba6 <floor+0x46>
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	bfbe      	ittt	lt
 8004bd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004bd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8004bda:	19a4      	addlt	r4, r4, r6
 8004bdc:	ea24 0407 	bic.w	r4, r4, r7
 8004be0:	2500      	movs	r5, #0
 8004be2:	e7e0      	b.n	8004ba6 <floor+0x46>
 8004be4:	2e33      	cmp	r6, #51	; 0x33
 8004be6:	dd0b      	ble.n	8004c00 <floor+0xa0>
 8004be8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004bec:	d104      	bne.n	8004bf8 <floor+0x98>
 8004bee:	ee10 2a10 	vmov	r2, s0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	f7fb faee 	bl	80001d4 <__adddf3>
 8004bf8:	ec41 0b10 	vmov	d0, r0, r1
 8004bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	fa23 f707 	lsr.w	r7, r3, r7
 8004c0c:	4207      	tst	r7, r0
 8004c0e:	d0f3      	beq.n	8004bf8 <floor+0x98>
 8004c10:	a30f      	add	r3, pc, #60	; (adr r3, 8004c50 <floor+0xf0>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fadd 	bl	80001d4 <__adddf3>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f7fb ff1f 	bl	8000a60 <__aeabi_dcmpgt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d0bf      	beq.n	8004ba6 <floor+0x46>
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	da02      	bge.n	8004c30 <floor+0xd0>
 8004c2a:	2e14      	cmp	r6, #20
 8004c2c:	d103      	bne.n	8004c36 <floor+0xd6>
 8004c2e:	3401      	adds	r4, #1
 8004c30:	ea25 0507 	bic.w	r5, r5, r7
 8004c34:	e7b7      	b.n	8004ba6 <floor+0x46>
 8004c36:	2301      	movs	r3, #1
 8004c38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004c3c:	fa03 f606 	lsl.w	r6, r3, r6
 8004c40:	4435      	add	r5, r6
 8004c42:	4545      	cmp	r5, r8
 8004c44:	bf38      	it	cc
 8004c46:	18e4      	addcc	r4, r4, r3
 8004c48:	e7f2      	b.n	8004c30 <floor+0xd0>
 8004c4a:	2500      	movs	r5, #0
 8004c4c:	462c      	mov	r4, r5
 8004c4e:	e7aa      	b.n	8004ba6 <floor+0x46>
 8004c50:	8800759c 	.word	0x8800759c
 8004c54:	7e37e43c 	.word	0x7e37e43c
 8004c58:	bff00000 	.word	0xbff00000
 8004c5c:	000fffff 	.word	0x000fffff

08004c60 <scalbn>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	ec55 4b10 	vmov	r4, r5, d0
 8004c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	b99a      	cbnz	r2, 8004c98 <scalbn+0x38>
 8004c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004c74:	4323      	orrs	r3, r4
 8004c76:	d036      	beq.n	8004ce6 <scalbn+0x86>
 8004c78:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <scalbn+0x100>)
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	ee10 0a10 	vmov	r0, s0
 8004c80:	2200      	movs	r2, #0
 8004c82:	f7fb fc5d 	bl	8000540 <__aeabi_dmul>
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <scalbn+0x104>)
 8004c88:	429e      	cmp	r6, r3
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	da10      	bge.n	8004cb2 <scalbn+0x52>
 8004c90:	a32b      	add	r3, pc, #172	; (adr r3, 8004d40 <scalbn+0xe0>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	e03a      	b.n	8004d0e <scalbn+0xae>
 8004c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004c9c:	428a      	cmp	r2, r1
 8004c9e:	d10c      	bne.n	8004cba <scalbn+0x5a>
 8004ca0:	ee10 2a10 	vmov	r2, s0
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	f7fb fa94 	bl	80001d4 <__adddf3>
 8004cac:	4604      	mov	r4, r0
 8004cae:	460d      	mov	r5, r1
 8004cb0:	e019      	b.n	8004ce6 <scalbn+0x86>
 8004cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	3a36      	subs	r2, #54	; 0x36
 8004cba:	4432      	add	r2, r6
 8004cbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004cc0:	428a      	cmp	r2, r1
 8004cc2:	dd08      	ble.n	8004cd6 <scalbn+0x76>
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	a120      	add	r1, pc, #128	; (adr r1, 8004d48 <scalbn+0xe8>)
 8004cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ccc:	da1c      	bge.n	8004d08 <scalbn+0xa8>
 8004cce:	a120      	add	r1, pc, #128	; (adr r1, 8004d50 <scalbn+0xf0>)
 8004cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd4:	e018      	b.n	8004d08 <scalbn+0xa8>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	dd08      	ble.n	8004cec <scalbn+0x8c>
 8004cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ce6:	ec45 4b10 	vmov	d0, r4, r5
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004cf0:	da19      	bge.n	8004d26 <scalbn+0xc6>
 8004cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004cf6:	429e      	cmp	r6, r3
 8004cf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004cfc:	dd0a      	ble.n	8004d14 <scalbn+0xb4>
 8004cfe:	a112      	add	r1, pc, #72	; (adr r1, 8004d48 <scalbn+0xe8>)
 8004d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e2      	bne.n	8004cce <scalbn+0x6e>
 8004d08:	a30f      	add	r3, pc, #60	; (adr r3, 8004d48 <scalbn+0xe8>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fc17 	bl	8000540 <__aeabi_dmul>
 8004d12:	e7cb      	b.n	8004cac <scalbn+0x4c>
 8004d14:	a10a      	add	r1, pc, #40	; (adr r1, 8004d40 <scalbn+0xe0>)
 8004d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0b8      	beq.n	8004c90 <scalbn+0x30>
 8004d1e:	a10e      	add	r1, pc, #56	; (adr r1, 8004d58 <scalbn+0xf8>)
 8004d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d24:	e7b4      	b.n	8004c90 <scalbn+0x30>
 8004d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d2a:	3236      	adds	r2, #54	; 0x36
 8004d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004d34:	4620      	mov	r0, r4
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <scalbn+0x108>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	e7e8      	b.n	8004d0e <scalbn+0xae>
 8004d3c:	f3af 8000 	nop.w
 8004d40:	c2f8f359 	.word	0xc2f8f359
 8004d44:	01a56e1f 	.word	0x01a56e1f
 8004d48:	8800759c 	.word	0x8800759c
 8004d4c:	7e37e43c 	.word	0x7e37e43c
 8004d50:	8800759c 	.word	0x8800759c
 8004d54:	fe37e43c 	.word	0xfe37e43c
 8004d58:	c2f8f359 	.word	0xc2f8f359
 8004d5c:	81a56e1f 	.word	0x81a56e1f
 8004d60:	43500000 	.word	0x43500000
 8004d64:	ffff3cb0 	.word	0xffff3cb0
 8004d68:	3c900000 	.word	0x3c900000

08004d6c <_init>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr

08004d78 <_fini>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr
